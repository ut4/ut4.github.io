{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "https://ut4.github.io/pike/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Käyttäjäroolit ja oikeudet",
    "content": "Käyttäjäroolit ja oikeudet . Pike sisältää Pike Auth ACL-luokan, jolla on helppo luoda systeemi, jolla tarkastaa mitä kukin applikaation käyttäjärooli saa, ja ei saa tehdä. . Sisällysluettelo . Peruskäyttö | . Peruskäyttö . Setuppi: . use Pike Auth ACL; $resources = (object) [ &#39;products&#39; =&gt; (object) [ &#39;create&#39; =&gt; 1 &lt;&lt; 1, &#39;edit&#39; =&gt; 1 &lt;&lt; 2, &#39;comment&#39; =&gt; 1 &lt;&lt; 3, ], &#39;reviews&#39; =&gt; (object) [ &#39;post&#39; =&gt; 1 &lt;&lt; 1, &#39;moderate&#39; =&gt; 1 &lt;&lt; 2, ] ]; $userPermissions = (object) [ ACL::ROLE_EDITOR =&gt; (object) [ &#39;products&#39; =&gt; ACL::makePermissions([&#39;comment&#39;, &#39;edit&#39;], $resources-&gt;products), &#39;reviews&#39; =&gt; ACL::makePermissions(&#39;*&#39;, $resources-&gt;reviews), ], ACL::ROLE_CONTRIBUTOR =&gt; (object) [ &#39;products&#39; =&gt; ACL::makePermissions([&#39;comment&#39;], $resources-&gt;products), &#39;reviews&#39; =&gt; ACL::makePermissions([&#39;post&#39;], $resources-&gt;reviews), ] ]; $acl = new ACL; $acl-&gt;setRules((object)[&#39;resources&#39; =&gt; $resources, &#39;userPermissions&#39; =&gt; $userPermissions]); . Käyttäminen: . $acl-&gt;can(ACL::ROLE_EDITOR, &#39;create&#39;, &#39;products&#39;); // false $acl-&gt;can(ACL::ROLE_EDITOR, &#39;edit&#39;, &#39;products&#39;); // true $acl-&gt;can(ACL::ROLE_EDITOR, &#39;comment&#39;, &#39;products&#39;); // true $acl-&gt;can(ACL::ROLE_EDITOR, &#39;post&#39;, &#39;reviews&#39;); // true $acl-&gt;can(ACL::ROLE_EDITOR, &#39;moderate&#39;, &#39;reviews&#39;); // true $acl-&gt;can(ACL::ROLE_CONTRIBUTOR, &#39;create&#39;, &#39;products&#39;); // false $acl-&gt;can(ACL::ROLE_CONTRIBUTOR, &#39;edit&#39;, &#39;products&#39;); // false $acl-&gt;can(ACL::ROLE_CONTRIBUTOR, &#39;comment&#39;, &#39;products&#39;); // true $acl-&gt;can(ACL::ROLE_CONTRIBUTOR, &#39;post&#39;, &#39;reviews&#39;); // true $acl-&gt;can(ACL::ROLE_CONTRIBUTOR, &#39;moderate&#39;, &#39;reviews&#39;); // false . Oletuskäyttäytyminen: . // false, jos role|action|resource ei olemassa $acl-&gt;can(NONEXISTING_ROLE, &#39;post&#39;, &#39;reviews&#39;); // false $acl-&gt;can(ACL::ROLE_EDITOR, &#39;nonExistingAction&#39;, &#39;reviews&#39;); // false $acl-&gt;can(ACL::ROLE_EDITOR, &#39;post&#39;, &#39;nonExistingResource&#39;); // false // true, jos kyseessä super-admin $acl-&gt;can(ACL::ROLE_SUPER_ADMIN, &#39;nonExistingAction&#39;, &#39;reviews&#39;); // true $acl-&gt;can(ACL::ROLE_SUPER_ADMIN, &#39;post&#39;, &#39;nonExistingResource&#39;); // true $acl-&gt;can(ACL::ROLE_SUPER_ADMIN, &#39;kissat koiria&#39;, &#39;gfffögkfhjd&#39;); // true .",
    "url": "https://ut4.github.io/pike/acl.html",
    "relUrl": "/acl.html"
  }
  ,"2": {
    "title": "API",
    "content": "API . Piken API-referenssi. .",
    "url": "https://ut4.github.io/pike/api/api.html",
    "relUrl": "/api/api.html"
  }
  ,"3": {
    "title": "Pike\\Auth",
    "content": "namespace Pike Auth .",
    "url": "https://ut4.github.io/pike/api/auth/auth.html",
    "relUrl": "/api/auth/auth.html"
  }
  ,"4": {
    "title": "Autentikaatio",
    "content": "Autentikaatio . Pike sisältää autentikaatiomoduulin, jolla on yksi julkinen luokka - Pike Auth Authenticator. Autentikaattori käyttää tietokantaa pitkäaikaisen, ja php-natiivia sessiota lyhytaikaisen tiedon tallennukseen. Tallennusmekanismit ei ole vielä kustomoitavissa. . Pike Auth Authenticator olettaa, että sille annettu data on semanttisesti validia. Esim. &#39;ei-email&#39; tai tyhjä merkkijono on sen mielestä ihan yhtä validi kuin &#39;validi@email.com&#39; tai &#39;Kryptograafisest1 vahva salasana (€&amp;#&#39;. Muista siis validoida sille annetut arvot esim. Pike Validation-luokkaa käyttäen. . use Pike Auth Authenticator; class MyCtrl { public function __construct(Authenticator $auth) { $this-&gt;auth = $auth; } // tai.. public function myMethod(Authenticator $auth): void { // tee jotain $auth:llä } } . Sisällysluettelo . Käyttäjän kirjaaminen sisään | Käyttäjän kirjautumistietojen haku | Käyttäjän kirjaaminen ulos | Käyttäjän luominen (1. vaihe) | Käyttäjän aktivoiminen (2. vaihe) | Käyttäjän salasanan palautus (1. vaihe) | Käyttäjän salasanan palautus (2. vaihe) | . Käyttäjän kirjaaminen sisään . try { $mySerializeUserToSession = function (object $user) { return (object) [&#39;id&#39; =&gt; $user-&gt;id, &#39;role&#39; =&gt; (int) $user-&gt;role]; }; $auth-&gt;login(&#39;username&#39;, &#39;password&#39;, $mySerializeUserToSession); // ok, käyttäjä on nyt kirjattu sessioon } catch (PikeException $e) { if ($e-&gt;getCode() === Authenticator::INVALID_CREDENTIAL) ; // Käyttäjätunnus tai salasana väärin elseif ($e-&gt;getCode() === Authenticator::UNEXPECTED_ACCOUNT_STATUS) ; // Tili ei aktivoitu else ; // Odottamaton poikkeus } . Käyttäjän kirjautumistietojen haku . $myDataFromSession = $auth-&gt;getIdentity(); if ($myDataFromSession) echo $myDataFromSession-&gt;id; // &#39;bf789e1e-c99... else ; // Kirjautumistietoja ei löytynyt sessiosta . Käyttäjän kirjaaminen ulos . $auth-&gt;logout(); // Ok, kirjautumistiedot poistettiin sessiosta . Käyttäjän luominen (1. vaihe) . try { $username = &#39;username&#39;; $email = &#39;e@mail.com&#39;; $password = &#39;pass&#39;; $role = Pike Auth ACL::ROLE_CONTRIBUTOR; $myMakeEmailSettings = function ($user, $activationKey, $settings) { // echo $settings-&gt;fromAddress; // &#39;&#39; echo $settings-&gt;fromName; // &#39;&#39; echo $settings-&gt;toAddress; // &lt;sama kuin input $email&gt; echo $settings-&gt;toName; // &lt;sama kuin input $username&gt; echo $settings-&gt;subject; // &#39;&#39; echo $settings-&gt;body; // &#39;&#39; // $settings-&gt;fromAddress = &#39;no-reply@my-site.com&#39;; $settings-&gt;subject = &#39;Tilisi palveluun my-site.com&#39;; $settings-&gt;body = sprintf( &#39;Aktivoi tili osoitteessa: %s. Linkki on voimassa %d tuntia.&#39;, &quot;my-site.com/my-activate-account-route/{$activationKey}&quot;, intval(Authenticator::ACTIVATION_KEY_EXPIRATION_SECS / 60 / 60), ); }; $insertId = $auth-&gt;requestNewAccount($username, $email, $password, $role, $myMakeEmailSettings); // Ok, uusi tili insertoitiin tietokantaan parametrien tiedoilla, // accountStatuksella Pike Auth Authenticator::ACCOUNT_STATUS_UNACTIVATED, // ja lähetettiin myMakeEmailSettings-closuressa määritelty sähköposti } catch (PikeException $e) { if ($e-&gt;getCode() === Authenticator::USER_ALREADY_EXISTS) ; // $username, tai $email oli jo käytössä elseif ($e-&gt;getCode() === Authenticator::FAILED_TO_FORMAT_MAIL) ; // myMakeEmailSettings jätti jotain täyttämättä elseif ($e-&gt;getCode() === Authenticator::FAILED_TO_SEND_MAIL) ; // sähköpostin lähetys epäonnistui else ; // Odottamaton poikkeus } . Käyttäjän aktivoiminen (2. vaihe) . try { $activationKey = &#39;pitkä-random-merkkijono&#39;; $auth-&gt;activateAccount($activationKey); } catch (PikeException $e) { if ($e-&gt;getCode() === Authenticator::INVALID_CREDENTIAL) ; // Aktivointiavainta ei löytynyt elseif ($e-&gt;getCode() === Authenticator::EXPIRED_KEY) ; // Aktivointiavain oli vanhentunut. Note: käyttäjä poistettiin automaattisesti else ; // Odottamaton poikkeus } . Käyttäjän salasanan palautus (1. vaihe) . try { $userNameOrEmail = &#39;username&#39;; $myMakeEmailSettings = function ($user, $resetKey, $settings) { // echo $settings-&gt;fromAddress; // &#39;&#39; echo $settings-&gt;fromName; // &#39;&#39; echo $settings-&gt;toAddress; // &lt;käyttäjän $userNameOrEmail email&gt; echo $settings-&gt;toName; // &lt;käyttäjän $userNameOrEmail username&gt; echo $settings-&gt;subject; // &#39;&#39; echo $settings-&gt;body; // &#39;&#39; // $settings-&gt;fromAddress = &#39;no-reply@my-site.com&#39;; $settings-&gt;subject = &#39;Salasanan palautus&#39;; $settings-&gt;body = sprintf( &#39;Vaihda salasana osoitteessa: %s. Linkki on voimassa %d tuntia.&#39;, &quot;my-site.com/my-finalize-password-route/{$resetKey}&quot;, intval(Authenticator::RESET_KEY_EXPIRATION_SECS / 60 / 60) ); }; $auth-&gt;requestPasswordReset($userNameOrEmail, $myMakeEmailSettings); // Ok, salasanan resetointipyyntötiedot tallennettiin $userNameOrEmail- // käyttäjän tietoihin tietokantaan, ja lähetettiin myMakeEmailSettings- // closuressa määritelty sähköposti } catch (PikeException $e) { if ($e-&gt;getCode() === Authenticator::INVALID_CREDENTIAL) ; // Käyttäjää $userNameOrEmail ei löytynyt elseif ($e-&gt;getCode() === Authenticator::UNEXPECTED_ACCOUNT_STATUS) ; // Tili ei aktivoitu elseif ($e-&gt;getCode() === Authenticator::FAILED_TO_FORMAT_MAIL) ; // myMakeEmailSettings jätti jotain täyttämättä elseif ($e-&gt;getCode() === Authenticator::FAILED_TO_SEND_MAIL) ; // sähköpostin lähetys epäonnistui else ; // Odottamaton poikkeus } . Käyttäjän salasanan palautus (2. vaihe) . try { $auth-&gt;finalizePasswordReset(&#39;pitkä-random-merkkijono&#39;, &#39;e@mail.com&#39;, &#39;newPassword&#39;); // Ok, uusi salasana päivitettiin tietokantaan ja resetointipyyntötiedot // tyhjennettiin tietokannasta } catch (PikeException $e) { if ($e-&gt;getCode() === Authenticator::INVALID_CREDENTIAL) ; // Resetointiavainta ei ollut olemassa, tai $email ei täsmännyt elseif ($e-&gt;getCode() === Authenticator::EXPIRED_KEY) ; // Resetointiavain oli vanhentunut else ; // Odottamaton poikkeus } .",
    "url": "https://ut4.github.io/pike/authentication.html",
    "relUrl": "/authentication.html"
  }
  ,"5": {
    "title": "Reittien käyttäjäoikeudet",
    "content": "Reittien käyttäjäoikeudet . Tämä esimerkki havainnollistaa miten voit hylätä tai hyväksyä HTTP-pyyntöjä käyttäjän roolin perusteella käyttämällä Pike Auth ACL-luokkaa, reittimiddlewarea, ja reittikonteksteja. . Esimerkin koodi löytyy kokonaisuudessaan osoitteessa github.com/ut4/pike/tree/master/examples/AuthorizingRoutes. . . Sisällysluettelo . Step 1: Reittimiddlewaren lisääminen applikaatioon | Step 2: Reittimiddlewaren implementointi | Step 3: ACL-informaation lisääminen reitteihin | Testipyynnöt ja vastaukset Roolille ACL::ROLE_CONTRIBUTOR | Roolille ACL::ROLE_AUTHOR | Roolille ACL::ROLE_SUPER_ADMIN | | Step 1: Reittimiddlewaren lisääminen applikaatioon . index.php . ... $myModules = [AuthorizingRoutes MyAuthModule::class, muut reitit...]; ... $app-&gt;handleRequest($req); . Step 2: Reittimiddlewaren implementointi . Katso myös. Käyttäjäroolit ja oikeudet. . AuthorizingRoutes/MyAuthModule.php . ... abstract class MyAuthModule { /** * @param Pike AppContext $ctx */ public static function init(AppContext $ctx): void { $ctx-&gt;acl = new Pike Auth ACL; $ctx-&gt;acl-&gt;setRules(self::makeMyAclRules()); // $ctx-&gt;router-&gt;on(&#39;*&#39;, function ($req, $res, $next) use ($ctx) { // Tämä tulisi normaalisti sessiosta ($ctx-&gt;auth-&gt;getIdentity()-&gt;role) $userRole = LOGGED_IN_USER_ROLE; // ks. Step 3 [$action, $resource] = explode(&#39;:&#39;, $req-&gt;routeInfo-&gt;myCtx); if (!$ctx-&gt;acl-&gt;can($userRole, $action, $resource)) $res-&gt;status(403)-&gt;json([&#39;err&#39; =&gt; &#39;Not permitted&#39;]); else $next(); }); } /** * @return stdClass */ private static function makeMyAclRules(): stdClass { // Nämä tulisi normaalisti esim. tiedostosta tai tietokannasta. $resources = (object) [ &#39;products&#39; =&gt; ..., &#39;reviews&#39; =&gt; ... ]; $userPermissions = (object) [ ACL::ROLE_EDITOR =&gt; (object) [ &#39;products&#39; =&gt; ..., &#39;reviews&#39; =&gt; ..., ], ACL::ROLE_CONTRIBUTOR =&gt; (object) [ &#39;products&#39; =&gt; ..., &#39;reviews&#39; =&gt; ..., ] ]; return (object) [ &#39;resources&#39; =&gt; $resources, &#39;userPermissions&#39; =&gt; $userPermissions ]; } } . Step 3: ACL-informaation lisääminen reitteihin . AuthorizingRoutes/Product/ProductModule.php | AuthorizingRoutes/Review/ReviewModule.php | . ... abstract class ProductModule { /** * @param Pike AppContext $ctx */ public static function init(AppContext $ctx): void { $ctx-&gt;router-&gt;map(&#39;POST&#39;, &#39;/products&#39;, [ProductController::class, &#39;handleCreateProduct&#39;, &#39;create:products&#39;] ); $ctx-&gt;router-&gt;map(&#39;PUT&#39;, &#39;/products/[i:productId]&#39;, [ProductController::class, &#39;handleEditProduct&#39;, &#39;edit:products&#39;] ); $ctx-&gt;router-&gt;map(&#39;POST&#39;, &#39;/products/[i:productId]/comment&#39;, [ProductController::class, &#39;handleAddComment&#39;, &#39;comment:products&#39;] ); } } ... sama setti Review/ReviewModule.php:ssa . Testipyynnöt ja vastaukset . Esimerkin applikaatiota voi testata esimerkiksi php:hen bundlatulla dev-serverillä: . Aja cd examples | php -S localhost:8080 -t AuthorizingRoutes (-S = serveri, -t = public_html -kansio) | . | Päivitä AuthorizingRoutes/index.php -tiedoston define(&#39;LOGGED_IN_USER_ROLE&#39;, &lt;arvo&gt;) | . Roolille ACL::ROLE_CONTRIBUTOR . POST &#39;http://localhost:8080/index.php?q=/products&#39; -&gt; &#39;{&quot;err&quot;:&quot;Not permitted&quot;}&#39; POST &#39;http://localhost:8080/index.php?q=/products/1/comment&#39; -&gt; &#39;{&quot;ok&quot;:&quot;ok&quot;}&#39; PUT &#39;http://localhost:8080/index.php?q=/products/1&#39; -&gt; &#39;{&quot;err&quot;:&quot;Not permitted&quot;}&#39; POST &#39;http://localhost:8080/index.php?q=/reviews&#39; -&gt; &#39;{&quot;insertId&quot;:1}&#39; PUT &#39;http://localhost:8080/index.php?q=/reviews/1/approve-or-reject&#39; -&gt; &#39;{&quot;ok&quot;:&quot;ok&quot;}&#39; . Roolille ACL::ROLE_AUTHOR . POST &#39;http://localhost:8080/index.php?q=/products&#39; -&gt; &#39;{&quot;err&quot;:&quot;Not permitted&quot;}&#39; POST &#39;http://localhost:8080/index.php?q=/products/1/comment&#39; -&gt; &#39;{&quot;ok&quot;:&quot;ok&quot;}&#39; PUT &#39;http://localhost:8080/index.php?q=/products/1&#39; -&gt; &#39;{&quot;ok&quot;:&quot;ok&quot;}&#39; POST &#39;http://localhost:8080/index.php?q=/reviews&#39; -&gt; &#39;{&quot;insertId&quot;:1}&#39; PUT &#39;http://localhost:8080/index.php?q=/reviews/1/approve-or-reject&#39; -&gt; &#39;{&quot;err&quot;:&quot;Not permitted&quot;}&#39; . Roolille ACL::ROLE_SUPER_ADMIN . POST|PUT &#39;&lt;mikäTahansaReitti&gt;&#39; -&gt; &#39;{&quot;ok&quot;:&quot;ok&quot;}&#39; .",
    "url": "https://ut4.github.io/pike/examples/authorizing-routes.html",
    "relUrl": "/examples/authorizing-routes.html"
  }
  ,"6": {
    "title": "Pike 101",
    "content": "Perusteet . Tämä esimerkki havainnollistaa miten: . Pike-applikaatio laitetaan liikkeelle (index.php) | HTTP-reittejä rekisteröidään, koodia voi jaotella ryhmiin (SomeModule.php) | HTTP-pyyntöjen parametreihin ja POST-dataan pääse käsiksi, miten selaimelle lähetetään tietoa takaisin (SomeController.php) | Auryn Injector injektoi automaattisesti olioita kontrollereihin type-hinttien perusteella | . Esimerkin koodi löytyy kokonaisuudessaan osoitteessa github.com/ut4/pike/tree/master/examples/Pike101/. . . Sisällysluettelo . Applikaation rakenne | index.php | Pike101/SomeModule.php | Pike101/SomeController.php | Pike101/SomeClass.php | Esimerkkipyynnöt | Applikaation rakenne . Esimerkin applikaatiossa on neljä tiedostoa: . /Pike101 src/ SomeClass.php SomeController.php SomeModule.php index.php . index.php . index-tiedoston tehtävänä on: . Konfiguroida autoloader (1) | Rekisteröidä applikaation moduulit (2) | Handlata pyyntö (3) | . &lt;?php // (1) $loader = require dirname(__DIR__) . &#39;/vendor/autoload.php&#39;; $loader-&gt;addPsr4(&#39;Me Pike101 &#39;, __DIR__ . &#39;/src&#39;); // (2) $myModules = [ Me Pike101 SomeModule::class]; $app = Pike App::create($myModules); // (3) $req = Pike Request::createFromGlobals(&#39;&#39;, $_GET[&#39;q&#39;] ?? &#39;/&#39;); $app-&gt;handleRequest($req); . Pike101/SomeModule.php . Moduulitiedostot puolestaan: . Rekisteröi reitit (1), ks. myös examples/mapping-routes.html | . Moduulitiedostoja on yleensä useita, ja jokainen tiedosto rekisteröi omat reittinsä (esim. GET tuotteet/:id, POST /tuotteet jne.). Moduulitiedostoissa voi suorittaa myös muita kertaluontoisia tehtäviä, kuten avata tietokantayhteyden. . &lt;?php declare(strict_types=1); namespace Me Pike101; abstract class SomeModule { /** * @param Pike AppContext $ctx */ public static function init( Pike AppContext $ctx): void { // (1) $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/some-route&#39;, [SomeController::class, &#39;handleSomeRoute&#39;] ); $ctx-&gt;router-&gt;map(&#39;POST&#39;, &#39;/another-route/[*:someParam]&#39;, [SomeController::class, &#39;handleAnotherRoute&#39;] ); } } . Pike101/SomeController.php . Kontrollerit: . Vastaanottaa pyynnön (1) | Prosessoi pyynnön (2) | Vastaa pyyntöön (3) | . &lt;?php declare(strict_types=1); namespace Me Pike101; use Pike Response; use Pike Request; class SomeController { /** * @param Me Pike101 SomeClass $myClass * @param Pike Response $res */ // (1) public function handleSomeRoute(SomeClass $myClass, Response $res): void { // (2) $data = $myClass-&gt;doSomething(); // (3) if ($data) $res-&gt;json([$data]); else $res-&gt;status(500)-&gt;json([&#39;err&#39; =&gt; 1]); } /** * @param Pike Request $req * @param Pike Response $res */ // (1) public function handleAnotherRoute(Request $req, Response $res): void { // (3) $res-&gt;json([&#39;yourParamWas&#39; =&gt; $req-&gt;params-&gt;someParam, &#39;requestBodyWas&#39; =&gt; $req-&gt;body]); } } . Pike101/SomeClass.php . SomeClass.php on tässä esimerkissä mukana vain havainnollistamassa Auryn Injectorin toimintaa. . &lt;?php declare(strict_types=1); namespace Me Pike101; class SomeClass { /** * @return string|null */ public function doSomething(): ?string { return &#39;Hello&#39;; } } . Esimerkkipyynnöt . Esimerkin applikaatiota voi testata esimerkiksi php:hen bundlatulla dev-serverillä: . cd examples | php -S localhost:8080 -t Pike101 (-S = serveri, -t = public_html -kansio) | . | some-route url: http://localhost:8080/index.php?q=/some-route | method: GET | . | another-route url: http://localhost:8080/index.php?q=/another-route/foo | method: POST | body: {“any”: “thing”} | header: Content-Type: application/json | . | .",
    "url": "https://ut4.github.io/pike/examples/basics.html",
    "relUrl": "/examples/basics.html"
  }
  ,"7": {
    "title": "Tietokanta",
    "content": "Tietokanta . Pikessä tietokantakyselyt suoritetaan Pike Db-luokalla, joka on on ohut wräpperi PDO-abstraktion ympärille. . use Pike Db; class MyCtrl { public function __construct(Db $db) { $this-&gt;db = $db; } // tai.. public function myMethod(Db $db) { // tee jotain $db:llä } } . Sisällysluettelo . Käyttöönotto (MariaDb/MySQL) index.php | MyBootstrapModule.php | | Datan insertointi, yksi rivi | Datan insertointi, useita rivejä | Datan hakeminen, yksi rivi | Datan hakeminen, useita rivejä | Datan päivittäminen | Datan poistaminen | . Käyttöönotto (MariaDb/MySQL) . Pike Db:n konfigrointiin tarvitaan kolme asiaa: . Pike App::create():een passattu $config, jossa vähintään &#39;db.host&#39; =&gt; &#39;myval&#39; | Pike App::create():een passattu $ctx, jonka konstruktoriin [&#39;db&#39; =&gt; &#39;@auto&#39;] | $db-&gt;open()-kutsu | . Näiden jälkeen Pike Db injektoituu minkä tahansa kontrollerin konstruktoriin tai metodiin type-hinttien perusteella (kuten esim. examples/hello-world.html -esimerkin kontrolleri). Pike Db -luokasta luodaan vain yksi instanssi, ks. Auryn Injector-&gt;share(). . Esimerkki: . index.php . $config = [ &#39;db.host&#39; =&gt; &#39;127.0.0.1&#39;, // oletus &#39;127.0.0.1&#39; &#39;db.database&#39; =&gt; &#39;new2&#39;, // oletus &#39;&#39; &#39;db.user&#39; =&gt; &#39;devuser&#39;, // oletus &#39;&#39; &#39;db.pass&#39; =&gt; &#39;qweqwe&#39;, // oletus &#39;&#39; &#39;db.tablePrefix&#39; =&gt; &#39;rad_&#39;, // oletus &#39;&#39; &#39;db.charset&#39; =&gt; &#39;utf8&#39;, // oletus &#39;utf8&#39; ]; // tai $config = __DIR__ . &#39;/config.php&#39;; // jossa &lt;?php return [...]; $serviceHints = [&#39;db&#39; =&gt; Pike App::MAKE_AUTOMATICALLY]; // tai $serviceHints = [&#39;db&#39; =&gt; &#39;@auto&#39;]; $app = Pike App::create([MyBootstrapModule::class], $config, new Pike AppContext($serviceHints)); $app-&gt;handleRequest(...); . MyBootstrapModule.php . abstract class MyBootstrapModule { /** * @param Pike AppContext $ctx */ public static function init( Pike AppContext $ctx): void { try { $ctx-&gt;db-&gt;open(); } catch ( Pike PikeException $e) { // Tee jotain } } } . Datan insertointi, yksi rivi . $data = (object) [&#39;foo&#39; =&gt; &#39;value&#39;, &#39;bar&#39; =&gt; &#39;another value&#39;]; [$qList, $values, $columns] = $db-&gt;makeInsertQParts($data); try { $numAffectedRows = $db-&gt;exec(&quot;INSERT INTO `Products` ({$columns}) VALUES ({$qList})&quot;, $values); if ($numAffectedRows &gt; 0) echo $this-&gt;db-&gt;lastInsertId(); // &#39;14&#39; else ; // Tee jotain } catch ( Pike PikeException $e) { // Handlaa tilanne } . Datan insertointi, useita rivejä . $data = [ (object) [&#39;foo&#39; =&gt; &#39;value1&#39;, &#39;bar&#39; =&gt; &#39;another value&#39;], (object) [&#39;foo&#39; =&gt; &#39;value2&#39;, &#39;bar&#39; =&gt; &#39;another value2&#39;], ]; [$qGroups, $values, $columns] = $db-&gt;makeBatchInsertQParts($data); try { $numAffectedRows = $db-&gt;exec(&quot;INSERT INTO `Products` ({$columns}) VALUES {$qGroups}&quot;, $values); if ($numAffectedRows &gt; 0) echo $this-&gt;db-&gt;lastInsertId(); // &#39;14&#39; else ; // Tee jotain } catch ( Pike PikeException $e) { // Handlaa tilanne } . Datan hakeminen, yksi rivi . try { $row = $db-&gt;fetchOne(&quot;SELECT `foo`,`bar` FROM Products WHERE `id`=?&quot;, [1]); if ($row) echo $row[&#39;foo&#39;]; // &#39;value&#39; else ; // $row === null|false, tee jotain } catch ( Pike PikeException $e) { // Handlaa tilanne } . Datan hakeminen, useita rivejä . try { $rows = $db-&gt;fetchAll(&quot;SELECT `foo`,`bar` FROM Products WHERE `id`&lt;?&quot;, [3]); if ($rows) echo $rows[0][&#39;foo&#39;]; // &#39;value&#39; else ; // $rows === [], tee jotain } catch ( Pike PikeException $e) { // Handlaa tilanne } . Datan päivittäminen . $data = (object) [&#39;foo&#39; =&gt; &#39;value&#39;, &#39;bar&#39; =&gt; &#39;another value&#39;]; [$columns, $values] = $db-&gt;makeUpdateQParts($data); try { $numAffectedRows = $db-&gt;exec(&quot;UPDATE `Products` SET {$columns} WHERE `id`=?&quot;, array_merge($values, [1])); if ($numAffectedRows &gt; 0) ; // ok else ; // Tee jotain } catch ( Pike PikeException $e) { // Handlaa tilanne } . Datan poistaminen . try { $numAffectedRows = $db-&gt;exec(&quot;DELETE FROM Products WHERE `id`=?&quot;, [1]); if ($numAffectedRows &gt; 0) ; // ok else ; // tee jotain } catch ( Pike PikeException $e) { // Handlaa tilanne } .",
    "url": "https://ut4.github.io/pike/database.html",
    "relUrl": "/database.html"
  }
  ,"8": {
    "title": "Esimerkit",
    "content": "Esimerkit . Kokoelma miniapplikaatioita, jotka havainnollistaa Piken eri toiminnallisuuksia. . Sisällysluettelo . Pike 101 | Reittien mappaus | Reittien käyttäjäoikeudet |",
    "url": "https://ut4.github.io/pike/examples/examples.html",
    "relUrl": "/examples/examples.html"
  }
  ,"9": {
    "title": "Tiedostojen hallinta",
    "content": "Tiedostot . Pike FileSystem on abstraktio yleisimpien php-natiivien tiedostonhallintafunktioiden (is_dir(), file_get_contents()) ympärille. . use Pike FileSystemInterface; class MyCtrl { public function __construct(FileSystemInterface $fs) { $this-&gt;fs = $fs; } // tai.. public function myMethod(FileSystemInterface $fs): void { // tee jotain $fs:llä } } . Sisällysluettelo . Tiedoston luominen, tiedostoon kirjoittaminen | Tiedoston lukeminen | Tiedoston poistaminen | Tiedoston kopioiminen | Kansion luominen | Kansion poistaminen | Tiedostopolun tarkistaminen | Kansiopolun tarkistaminen | Kansion sisällön lukeminen (ei-rekursiivinen) | Kansion sisällön lukeminen (rekursiivinen) | Tiedoston viimeisimmän modifikaation lukeminen | Polun normalisointi | . Tiedoston luominen, tiedostoon kirjoittaminen . $numBytesWritten = $fs-&gt;write(__DIR__ . &#39;/tiedosto.txt&#39;, &#39;Sisältö&#39;); if ($numBytesWritten !== false) ; // ok else ; // Handlaa failure . Tiedoston lukeminen . $contents = $fs-&gt;read(__DIR__ . &#39;/tiedosto.txt&#39;); if ($contents !== false) ; // ok else ; // Handlaa failure . Tiedoston poistaminen . $ok = $fs-&gt;unlink(__DIR__ . &#39;/tiedosto.txt&#39;); if ($ok) ; // ok else ; // Handlaa failure . Tiedoston kopioiminen . Kohdepolun kansio tulee olla olemassa. Jos kohdetiedosto on jo olemassa, se ylikirjoitetaan. . $ok = $fs-&gt;copy(__DIR__ . &#39;/tiedosto.txt&#39;, __DIR__ . &#39;/copied.txt&#39;); if ($ok) ; // ok else ; // Handlaa failure . Kansion luominen . $perms = 0755; // oletus 0777 $recursive = false; // oletus true $ok = $fs-&gt;mkDir(__DIR__ . &#39;/kansio&#39;, $perms, $recursive); if ($ok) ; // ok else ; // Handlaa failure . Kansion poistaminen . $ok = $fs-&gt;rmDir(__DIR__ . &#39;/kansio&#39;); if ($ok) ; // ok else ; // Handlaa failure . Tiedostopolun tarkistaminen . $isFile = $fs-&gt;isFile(__DIR__ . &#39;/tiedosto.txt&#39;); if ($isFile) ; // on tiedosto else ; // ei ole tiedosto . Kansiopolun tarkistaminen . $isDir = $fs-&gt;isDir(__DIR__ . &#39;/kansio&#39;); if ($isDir) ; // on kansio else ; // ei ole kansio . Kansion sisällön lukeminen (ei-rekursiivinen) . $globPattern = &#39;*.txt&#39;; // oletus &#39;*&#39;, $globFlags = null; // oletus GLOB_ERR $fullFilePaths = $fs-&gt;readDir(__DIR__ . &#39;/kansio&#39;, $globPattern, $globFlags); if ($fullFilePaths !== false) echo $fullFilePaths[0] ?? &#39;&#39;; // /htdocs/projekti/kansio/foo.txt else ; // Handlaa failure . Kansion sisällön lukeminen (rekursiivinen) . $regexpPattern = &#39;/^.* .(js|css)$/&#39;; $flags = FilesystemIterator::CURRENT_AS_PATHNAME; // ks. php.net/manual/en/recursivedirectoryiterator.construct.php $fullFilePaths = $fs-&gt;readDirRecursive(__DIR__ . &#39;/kansio&#39;, $regexpPattern, $flags); if ($fullFilePaths) echo $fullFilePaths[0]; // /htdocs/projekti/kansio/alikansio/foo.js else ; // $fullFilePaths === [], tee jotain . Tiedoston viimeisimmän modifikaation lukeminen . $unixTime = $fs-&gt;lastModTime(__DIR__ . &#39;/tiedosto.txt&#39;); if ($unixTime !== false) ; // Tee jotain $unixTimella else ; // Handlaa failure . Polun normalisointi . $notNormalized = __DIR__ . &#39;/foo/&#39;; // c: kansio alikansio/foo/ $normalized = FileSystem::normalizePath($notNormalized); echo $normalized; // c:/kansio/alikansio/foo .",
    "url": "https://ut4.github.io/pike/filesystem.html",
    "relUrl": "/filesystem.html"
  }
  ,"10": {
    "title": "Koti",
    "content": "Pike docs . Minimalistinen dokumentaatio minimalistiselle frameworkille. Työn alla. . Sisällysluettelo . Esimerkit Pike 101 | Reittien mappaus | Reittien käyttäjäoikeudet | | Tietokanta | Tiedostojen hallinta | Datan validointi | Käyttäjäroolit ja oikeudet | Autentikaatio | Testaus | API |",
    "url": "https://ut4.github.io/pike/",
    "relUrl": "/"
  }
  ,"11": {
    "title": "Reittien mappaus",
    "content": "Reittien mappaus . Tämä esimerkki havainnollistaa: . että Pikessä reitit määritellään moduulien init()-tiedostossa | että reitteihin tulee määritellä [SomeController::class, &#39;methodName&#39;] | että reitille voi määritellä nimen, ja kontekstin | miten reittiin määritelty tieto päätyy Pike Request -olioon | . Pike käyttää reititykseen AltoRouteria, jonka dokumentaatio löytyy osoitteessa altorouter.com/usage/mapping-routes.html. AltoRouterin Match Types:ien ([i:myId]) lisäksi voit käyttää myös Piken omia. . Esimerkin koodi löytyy kokonaisuudessaan osoitteessa github.com/ut4/pike/tree/master/examples/MappingRoutes-kansiosta. . . Sisällysluettelo . Applikaation rakenne | MappingRoutes/Module.php | MappingRoutes/Controller.php | Esimerkkikutsut ja vastaukset route-a | route-b | route-c | route-d | | Piken rekisteröimät Match Typet | Applikaation rakenne . Esimerkin applikaatiossa on seuraavat tiedostot: . /MappingRoutes src/ Controller.php Module.php index.php . MappingRoutes/Module.php . &lt;?php declare(strict_types=1); namespace Me MappingRoutes; abstract class Module { /** * @param Pike AppContext $ctx */ public static function init( Pike AppContext $ctx): void { $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/route-a&#39;, [Controller::class, &#39;handleRouteA&#39;] ); $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/route-b/[i:myNumber]/[w:myOptionalSlug]?&#39;, [Controller::class, &#39;handleRouteB&#39;] ); $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/route-c/[foo|bar:fooOrBar]&#39;, [Controller::class, &#39;handleRouteC&#39;], &#39;nameOfRouteC&#39; ); $ctx-&gt;router-&gt;map(&#39;POST&#39;, &#39;/route-d/[i:id]&#39;, [Controller::class, &#39;handleRouteC&#39;, [&#39;my&#39; =&gt; &#39;context&#39;]] ); /* $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/some-route&#39;, &#39;notAnArray&#39;); // PikeException $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/some-route&#39;, [&#39;incomplete&#39;]); // PikeException $ctx-&gt;router-&gt;map(&#39;GET&#39;, &#39;/some-route&#39;); // PikeException */ } } . MappingRoutes/Controller.php . &lt;?php declare(strict_types=1); namespace Me MappingRoutes; use Pike Response; use Pike Request; class Controller { public function handleRouteA(Request $req, Response $res): void { $res-&gt;json((object) [ &#39;params&#39; =&gt; $req-&gt;params, &#39;body&#39; =&gt; $req-&gt;body, &#39;routeInfo&#39; =&gt; $req-&gt;routeInfo, ]); } // loput handlerit identtisiä handleRouteA:n kanssa // ... } . Esimerkkikutsut ja vastaukset . Esimerkin applikaatiota voi testata esimerkiksi php:hen bundlatulla dev-serverillä: . cd examples php -S localhost:8080 -t MappingRoutes | (-S = serveri, -t = public_html -kansio) | . | . route-a . GET &#39;http://localhost:8080/index.php?q=/route-a&#39; $req-&gt;params; // {} $req-&gt;body; // {} $req-&gt;routeInfo; // {&quot;myCtx&quot;:null,&quot;name&quot;:null} . route-b . GET &#39;http://localhost:8080/index.php?q=/route-b/1/foo-bar&#39; $req-&gt;params; // {&quot;myNumber&quot;:&quot;1&quot;,&quot;myOptionalSlug&quot;:&quot;foo-bar&quot;} $req-&gt;body; // {} $req-&gt;routeInfo; // {&quot;myCtx&quot;:null,&quot;name&quot;:null} GET &#39;http://localhost:8080/index.php?q=/route-b/2&#39; $req-&gt;params; // {&quot;myNumber&quot;:&quot;1&quot;} $req-&gt;body; // {} $req-&gt;routeInfo; // {&quot;myCtx&quot;:null,&quot;name&quot;:null} GET &#39;http://localhost:8080/index.php?q=/route-b/3/not-allœw€d&#39; -&gt; PikeException: No match GET &#39;http://localhost:8080/index.php?q=/route-b/not-a-number&#39; -&gt; PikeException: No match . route-c . GET &#39;http://localhost:8080/index.php?q=/route-c/foo&#39; -&gt; $req-&gt;params; // {&quot;fooOrBar&quot;:&quot;foo&quot;} $req-&gt;body; // {} $req-&gt;routeInfo; // {&quot;myCtx&quot;:null,&quot;name&quot;:&quot;nameOfRouteC&quot;} GET &#39;http://localhost:8080/index.php?q=/route-c/baz&#39; -&gt; PikeException: No match . route-d . POST &#39;http://localhost:8080/index.php?q=/route-d/1&#39; (Headers): `Content-Type: application/json` (Body): `{&quot;foo&quot;:&quot;bar&quot;}` // -&gt; $req-&gt;params; // {&quot;id:&quot;1&quot;} $req-&gt;body; // {&quot;foo&quot;:&quot;bar&quot;} $req-&gt;routeInfo; // {&quot;myCtx&quot;:{&quot;my&quot;:&quot;context&quot;},&quot;name&quot;:null} POST &#39;http://localhost:8080/index.php?q=/route-d/2&#39; (Headers): `Content-Type: application/json` (Body): none // -&gt; $req-&gt;params; // {&quot;id:&quot;2&quot;} $req-&gt;body; // {} $req-&gt;routeInfo; // {&quot;myCtx&quot;:{&quot;my&quot;:&quot;context&quot;},&quot;name&quot;:null} POST &#39;http://localhost:8080/index.php?q=/route-d/3&#39; (Headers): none (Body): `{&quot;bar&quot;:&quot;baz&quot;}` // -&gt; $req-&gt;params; // {&quot;id:&quot;3&quot;} $req-&gt;body; // {} $req-&gt;routeInfo; // {&quot;myCtx&quot;:{&quot;my&quot;:&quot;context&quot;},&quot;name&quot;:null} POST &#39;http://localhost:8080/index.php?q=/route-d/d&#39; // -&gt; PikeException: No match . Piken rekisteröimät Match Typet . $router-&gt;addMatchTypes([&#39;w&#39; =&gt; &#39;[0-9A-Za-z_-]++&#39;]); .",
    "url": "https://ut4.github.io/pike/examples/mapping-routes.html",
    "relUrl": "/examples/mapping-routes.html"
  }
  ,"12": {
    "title": "Pike\\AppConfig",
    "content": "class Pike AppConfig . Varastoi App::create():lle tarjotun konfiguraation. . Synopsis . class AppConfig { /* Metodit */ public get ( string $key, mixed $default = null ) : mixed|null public getVals ( void ) : object public setVals ( object|array&lt;string, mixed&gt; $config ) : void } . Metodit . get() . Palauttaa konfiguraatioarvon tai $default, mikäli sellaista ei löytynyt. . Signature . public function get ( string $key, mixed $default = null ) : mixed|null . Esimerkit . $single = $config-&gt;get(&#39;key&#39;, &#39;none&#39;); . . getVals() . Palauttaa konfiguraatiot kokonaisuudessaan. . Signature . public getVals ( void ) : object . Esimerkit . $all = $config-&gt;getVals(); . . setVals() . Yliajaa konfiguraatiot kokonaisuudessaan. . Signature . public function setVals ( object|array&lt;string, mixed&gt; $config ) : void . Esimerkit . $config-&gt;setVals((object) [&#39;foo&#39; =&gt; &#39;bar&#39;]); .",
    "url": "https://ut4.github.io/pike/api/pike_app-config.html",
    "relUrl": "/api/pike_app-config.html"
  }
  ,"13": {
    "title": "Pike\\AppContext",
    "content": "class Pike AppContext . Luokka, jolla voi kustomoida applikaation boot-vaihessa luomat oliot, kuten Db ja Authenticator. . Tämä luokka on turvallista periä. . Synopsis . class AppContext { /* Muuttujat */ public Router $router ; public AppConfig $appConfig ; public ?Db $db ; public ?Authenticator $auth ; public ?ACL $acl ; /* Metodit */ public __construct ( array&lt;string, string&gt; $serviceHints = [] ) } . Muuttujat . router Pike Router-olio. appConfig Pike AppConfig-olio. db Pike Db-olio. auth Pike Auth Authenticator-olio. acl Pike Auth ACL-olio. Metodit . __construct() . Luo uuden konteksti-olion, ja asettaa ohjeet applikaation luonnin yhteydessä luotaville olioille (db, tai auth). . Signature . public function __construct ( array&lt;string, string&gt; $serviceHints = [] ) . Esimerkki . $ctx = new AppContext([&#39;db&#39; =&gt; App::MAKE_AUTOMATICALLY]); .",
    "url": "https://ut4.github.io/pike/api/pike_app-context.html",
    "relUrl": "/api/pike_app-context.html"
  }
  ,"14": {
    "title": "Pike\\App",
    "content": "class Pike App . Pike-applikaatio: kasailee kaikki applikaation moduulit, vastaanottaa HTTP-pyynnöt, ja delegoi moduuleille. Katso myös Pike 101. . Synopsis . final class App { /* Vakiot */ const VERSION = &#39;&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;identifiers&gt;]&#39; ; const MAKE_AUTOMATICALLY = &#39;@auto&#39; ; /* Metodit */ public handleRequest ( Request|string $request, string $urlPath = null ) : void public static create ( class-string[] $modules, string|array|AppConfig $config = null, AppContext $ctx = null, callable $makeInjector = null ) : App } . Vakiot . VERSION Piken versionumero, noudattaa semanttista versiointia. MAKE_AUTOMATICALLY Eliminoi magiaa. Metodit . handleRequest() . Prosessoi HTTP-pyynnön. . Signature . public function handleRequest ( Request|string $request, string $urlPath = null ) : void . Esimerkit . Katso myös Esimerkit &gt; Pike 101 &gt; index.php. . $app-&gt;handleRequest(&#39;/&#39;); . . create() . Luo uuden applikaatio-olion. . Huomaa että luokan konstruktorin näkyvyys on private, joten applikaatio-olion voi luoda vain tällä metodilla. . Signature . public static function create ( class-string[] $modules, string|array|AppConfig $config = null, AppContext $ctx = null, callable $makeInjector = null ) : App . Esimerkit . Katso myös Esimerkit &gt; Pike 101 &gt; index.php. . $app = App::create(&#39;/&#39;); .",
    "url": "https://ut4.github.io/pike/api/pike_app.html",
    "relUrl": "/api/pike_app.html"
  }
  ,"15": {
    "title": "Pike\\ArrayUtils",
    "content": "class Pike ArrayUtils . Taulukkojen (ja ArrayObject-olioden) käsittelyä helpottava luokka. . Synopsis . class ArrayUtils { /* Metodit */ public findByKey ( array|ArrayObject $array, mixed $val, string $key, mixed $default = null ) : mixed|null public filterByKey ( array|ArrayObject $array, mixed $val, string $key ) : array|ArrayObject public findIndexByKey ( array|ArrayObject $array, mixed $val, string $key ) : int } . Metodit . findByKey() . Palauttaa taulukosta ensimmäisen objektin jonka $obj-&gt;key === $val, tai $default mikäli sellaista ei löytynyt. . Signature . public static function findByKey ( array|ArrayObject $array, mixed $val, string $key, mixed $default = null ) : mixed|null . Esimerkit . $arr = [(object) [&#39;id&#39; =&gt; &#39;1&#39;], (object) [&#39;id&#39; =&gt; &#39;2&#39;]]; ArrayUtils::findByKey($arr, &#39;1&#39;, &#39;id&#39;, &#39;none&#39;); // (object) [&#39;id&#39; =&gt; &#39;1&#39;] ArrayUtils::findByKey($arr, &#39;5&#39;, &#39;id&#39;, &#39;none&#39;); // &#39;none&#39; . . filterByKey() . Palauttaa uuden taulukon/ArrayObjektin jonka sisältönä vain ne $array:n objektit joiden $obj-&gt;key === $val. Mikäli yhtään ei löytynyt, palauttaa tyhjän taulukon/ArrayObjektin. . Signature . public static function filterByKey ( array|ArrayObject $array, mixed $val, string $key ) : array|ArrayObject . Esimerkit . $arr = [(object) [&#39;id&#39; =&gt; &#39;1&#39;], (object) [&#39;id&#39; =&gt; &#39;2&#39;]]; ArrayUtils::filterByKey($arr, &#39;1&#39;, &#39;id&#39;); // [(object) [&#39;id&#39; =&gt; &#39;1&#39;]] ArrayUtils::filterByKey($arr, &#39;5&#39;, &#39;id&#39;); // [] . . findIndexByKey() . Palauttaa taulukon ensimmäisen objektin indeksin jonka $obj-&gt;key === $val, tai -1 mikäli sellaista ei löytynyt. . Signature . public static function findIndexByKey ( array|ArrayObject $array, mixed $val, string $key ) : int . Esimerkit . $arr = [(object) [&#39;id&#39; =&gt; &#39;1&#39;], (object) [&#39;id&#39; =&gt; &#39;2&#39;]]; ArrayUtils::findIndexByKey($arr, &#39;1&#39;, &#39;id&#39;); // 0 ArrayUtils::findIndexByKey($arr, &#39;5&#39;, &#39;id&#39;); // -1 .",
    "url": "https://ut4.github.io/pike/api/pike_array-utils.html",
    "relUrl": "/api/pike_array-utils.html"
  }
  ,"16": {
    "title": "Pike\\Auth\\ACL",
    "content": "class Pike Auth ACL . Piken Access Contrl List -implementaatio. Katso myös Käyttäjäroolit ja oikeudet. . Synopsis . class ACL { /* Vakiot */ const ROLE_SUPER_ADMIN = 1 &lt;&lt; 0 ; const ROLE_EDITOR = 1 &lt;&lt; 1 ; const ROLE_AUTHOR = 1 &lt;&lt; 2 ; const ROLE_CONTRIBUTOR = 1 &lt;&lt; 3 ; const ROLE_LAST = 1 &lt;&lt; 23 ; const ROLE_VIEWER = self::ROLE_LAST ; const NO_PERMISSIONS = 0 ; /* Metodit */ public __construct ( bool $doThrowDevWarnings = false ) public setRules ( stdClass $compactRules ) : void public can ( int $role, string $action, string $resource ) : bool public static makePermissions ( array|string $allowedActions, stdClass $resourceActions ) : int } . Metodit . __construct() . Lue uuden ACL-olion. . Signature . public function __construct ( bool $doThrowDevWarnings = false ) . Esimerkit . $acl = new ACL(false); $acl-&gt;can(ACL::ROLE_EDITOR, &#39;ei-olemassa&#39;, &#39;ei-olemassa&#39;); // false $acl = new ACL(true); $acl-&gt;can(ACL::ROLE_EDITOR, &#39;ei-olemassa&#39;, &#39;ei-olemassa&#39;); // heittää PikeExceptionin . . setRules() . Asettaa ACL-säännöt, roolit ja oikeudet. . Signature . public function setRules ( stdClass $compactRules ) : void . Esimerkit . $acl-&gt;setRules((object) [&#39;resources&#39; =&gt; ..., &#39;userPermissions&#39; =&gt; ...]); . . can() . Kertoo onko käyttäjällä ($role) oikeus suorittaa aie ($action) resursissa $resource. Mikäli roolia, resurssia, tai aietta ei löydy, palauttaa aina false. Mikäli $role === Acl::ROLE_SUPER_ADMIN, palauttaa aina true. . Signature . public function can ( int $role, string $action, string $resource ) : bool . Esimerkit . $hasPermission = $acl-&gt;can(ACL::ROLE_AUTHOR, &#39;edit&#39;, &#39;posts&#39;); . . makePermissions() . Luo arvoja setRules()-metodille tarjoiltavaa oliota varten. . Signature . public static function makePermissions ( array|string $allowedActions, stdClass $resourceActions ) : int . Esimerkit . $perms = ACL::makePermissions(&#39;*&#39;, ...); .",
    "url": "https://ut4.github.io/pike/api/auth/pike_auth_acl.html",
    "relUrl": "/api/auth/pike_auth_acl.html"
  }
  ,"17": {
    "title": "Pike\\Auth\\Authenticator",
    "content": "class Pike Auth Authenticator . Autentikaation ja käyttäjänhallinnan julkinen API. . Synopsis . class Authenticator { /* Vakiot */ const ACTIVATION_KEY_EXPIRATION_SECS = 60 * 60 * 24 ; const RESET_KEY_EXPIRATION_SECS = 60 * 60 * 2 ; const INVALID_CREDENTIAL = 201010 ; const USER_ALREADY_EXISTS = 201011 ; const FAILED_TO_SEND_MAIL = 201012 ; const FAILED_TO_FORMAT_MAIL = 201013 ; const CRYPTO_FAILURE = 201014 ; const EXPIRED_KEY = 201015 ; const UNEXPECTED_ACCOUNT_STATUS = 201016 ; const ACCOUNT_STATUS_ACTIVATED = 0 ; const ACCOUNT_STATUS_UNACTIVATED = 1 ; const ACCOUNT_STATUS_BANNED = 2 ; /* Metodit */ public login ( string $username, string $password, callable $serializeUserForSession = null ) : bool public getIdentity ( void ) : mixed|null public logout ( void ) : bool public requestNewAccount ( string $username, string $email, string $password, int $role, callable $makeEmailSettings ) : string public activateAccount ( string $activationKey ) : bool public requestPasswordReset ( string $usernameOrEmail, callable $makeEmailSettings ) : bool public finalizePasswordReset ( string $key, string $email, string $newPassword ) : bool public updatePassword ( string $userId, string $newPassword ) : bool } . login() . Kirjaa käyttäjän sessioon. . Signature . public function login ( string $username, string $password, callable $serializeUserForSession = null ) : bool . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän kirjaaminen sisään. . $ok = $authenticator-&gt;login(&#39;user&#39;, &#39;pass&#39;, function (object $user) { return (object) [&#39;id&#39; =&gt; $user-&gt;id, &#39;role&#39; =&gt; (int) $user-&gt;role]; }); . . getIdentity() . Palauttaa sessioon tallennetun tiedon. . Signature . public function getIdentity ( void ) : mixed|null . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän kirjautumistietojen haku. . $myDataFromSession = $authenticator-&gt;getIdentity(); . . logout() . Poistaa sessioon kirjatun tiedon. . Signature . public function logout ( void ) : bool . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän kirjaaminen ulos. . $authenticator-&gt;logout(); . . requestNewAccount() . Luo uuden ei-aktivoidun tilin tietokantaan. . Signature . public function requestNewAccount ( string $username, string $email, string $password, int $role, callable $makeEmailSettings ) : string . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän luominen (1. vaihe). . $insertId = $auth-&gt;requestNewAccount(&#39;user&#39;, &#39;e@mail.com&#39;, &#39;pass&#39;, Pike Auth ACL::ROLE_CONTRIBUTOR, function (object $user, string $activationKey, object $settings): void { // ... }); . . activateAccount() . Aktivoi tietokantaan insertoidun ei-aktivoidun käyttäjän. . Signature . public function activateAccount ( string $activationKey ) : bool . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän aktivoiminen (2. vaihe). . $auth-&gt;activateAccount(&#39;pitkä-random-merkkijono&#39;); . . requestPasswordReset() . Asettaa tilin salasanan palautustilaan. . Signature . public function requestPasswordReset ( string $usernameOrEmail, callable $makeEmailSettings ) : bool . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän salasanan palautus (1. vaihe). . $auth-&gt;requestPasswordReset(&#39;e@mail.com&#39;, function (object $user, string $resetKey, object $settings): void { // ... }); . . finalizePasswordReset() . Asettaa tilille uuden salasanan, ja palauttaa sen salasanan palautustilasta. . Signature . public function finalizePasswordReset ( string $key, string $email, string $newPassword ) : bool . Esimerkit . Katso myös Autentikaatio &gt; Käyttäjän salasanan palautus (2. vaihe). . $auth-&gt;finalizePasswordReset(&#39;pitkä-random-merkkijono&#39;, &#39;e@mail.com&#39;, &#39;newPassword&#39;); .",
    "url": "https://ut4.github.io/pike/api/auth/pike_auth_authenticator.html",
    "relUrl": "/api/auth/pike_auth_authenticator.html"
  }
  ,"18": {
    "title": "Pike\\Auth\\Crypto",
    "content": "class Pike Auth Crypto . Abstraktoi php:n omat krypto-funktiot kuten password_hash() ja sodium_crypto_secretbox(). . Synopsis . class Crypto { /* Vakiot */ const SECRETBOX_KEYBYTES = SODIUM_CRYPTO_SECRETBOX_KEYBYTES ; // 32 /* Metodit */ public hashPass ( string $plainPass ) : string public verifyPass ( string $plainPass, string $hashedPass ) : bool public guidv4 ( void ) : string public genRandomToken ( int $bytes = 16 ) : string public encrypt ( string $plainStr, string $key ) : string public decrypt ( string $encodedStr, string $key ) : string } . Vakiot . SECRETBOX_KEYBYTES encrypt|decrypt() avaimen pituus, tavua. Metodit . hashPass() . Ks. password_hash(). . Signature . public function hashPass ( string $plainPass ) : string . Esimerkit . $hashed = $crypto-&gt;hashPass(&#39;salasana&#39;); . . verifyPass() . Ks. password_verify(). . Signature . public function verifyPass ( string $plainPass, string $hashedPass ) : bool . Esimerkit . $ok = $crypto-&gt;verifyPass(&#39;salasana&#39;, &#39;hashattu-salasana&#39;); . . guidv4() . Luo uuden UUID:n. . Signature . public function guidv4 ( void ) : string . Esimerkit . $uuid = $crypto-&gt;guidv4(); . . genRandomToken() . Luo satunnaisen merkkijonon, ks. random_bytes(). . Signature . public function genRandomToken ( int $bytes = 16 ) : string . Esimerkit . $randomString = $crypto-&gt;genRandomToken(32); . . encrypt() . Enkryptoi merkkijonon tai heittää PikeExceptionin mikäli se ei onnistunut. Ks. sodium_crypto_secretbox(). . strlen($key) tulee olla tasan Crypto::SECRETBOX_KEYBYTES (32). . Signature . public function encrypt ( string $plainStr, string $key ) : string . Esimerkit . $encryptedString = $crypto-&gt;encrypt(&#39;plain&#39;, &#39;merkkijono&#39;); . . decrypt() . Verifioi ja dekryptoi merkkijonon tai heittää PikeExceptionin mikäli se ei onnistunut. Ks. sodium_crypto_secretbox_open(). . strlen($key) tulee olla tasan Crypto::SECRETBOX_KEYBYTES (32). . Signature . public function decrypt ( string $encodedStr, string $key ) : string . Esimerkit . $plainString = $crypto-&gt;decrypt(&#39;encoded&#39;, &#39;merkkijono&#39;); .",
    "url": "https://ut4.github.io/pike/api/auth/pike_auth_crypto.html",
    "relUrl": "/api/auth/pike_auth_crypto.html"
  }
  ,"19": {
    "title": "Pike\\Db",
    "content": "class Pike Db . Piken tietokanta-, ja tietokantakyselyjen rakentajaluokka. Handlaa vain yhtä tietokantayhteyttä kerrallaan, tukee toistaiseksi vain MySQL / MariaDB -ajuria. . Synopsis . class Db { /* Metodit */ public __construct ( object|array&lt;string, mixed&gt; $config ) public open ( void ) : bool public fetchAll ( string $query, mixed[] $params = null, ...$fetchConfig ) : mixed[] public fetchOne ( string $query, mixed[] $params = null, ...$fetchConfig ) : object|array&lt;string, mixed&gt;|null public exec ( string $query, mixed[] $params = null ) : int public beginTransaction ( void ) : int public commit ( void ) : int public rollBack ( void ) : int public runInTransaction ( Closure $fn ) : mixed public lastInsertId ( void ) : string public attr ( int $attr, mixed $value = null ) : mixed|bool public setConfig ( object|array&lt;string, mixed&gt; $config ) : void public static makeInsertQParts ( object|array&lt;string, mixed&gt; $data ) : array public static makeBatchInsertQParts ( array&lt;object|array&gt; $data ) : array public static makeUpdateQParts ( object|array&lt;string, mixed&gt; $data ) : array public static columnify ( string $columnNameCandidate ) : string } . Metodit . __construct() . Luo uuden tietokantaolion ja asettaa tietokantayhteyden avaamisessa käytettävän konfiguraation. Yhteys tulee avata erikseen metodilla open(). . Signature . public function __construct ( object|array&lt;string, mixed&gt; $config ) . Esimerkit . Katso myös Tietokanta &gt; Käyttöönotto. . $db = new Db([&#39;db.host&#39; =&gt; &#39;127.0.0.1&#39;, &#39;db.user&#39; =&gt; &#39;user&#39;]); . . open() . Avaa tietokantayhteyden, tai heittää PikeExceptionin mikäli se ei onnistunut. . Signature . public function open ( void ) : bool . Esimerkit . Katso myös Tietokanta &gt; Käyttöönotto. . $ok = $db-&gt;open(); . . fetchAll() . Hakee useita rivejä tietokannasta, tai heittää PikeExceptionin. . Signature . public function fetchAll ( string $query, mixed[] $params = null, ...$fetchConfig ) : mixed[] . Esimerkit . Katso myös. Tietokanta &gt; Datan hakeminen. . $q = &#39;SELECT * FROM `foo` WHERE `id` &lt; ?&#39;; $assocs = $db-&gt;fetchAll($q, [&#39;10&#39;]); $instances = $db-&gt;fetchAll($q, [&#39;10&#39;], PDO::FETCH_CLASS, MyClass::class); . . fetchOne() . Hakee yhden rivin tietokannasta, tai heittää PikeExceptionin. . Signature . public function fetchOne ( string $query, mixed[] $params = null, ...$fetchConfig ) : object|array&lt;string, mixed&gt;|null . Esimerkit . Katso myös. Tietokanta &gt; Datan hakeminen. . $q = &#39;SELECT * FROM `foo` WHERE `id` = ?&#39;; $assoc = $db-&gt;fetchOne($q, [&#39;1&#39;]); $instance = $db-&gt;fetchOne($q, [&#39;1&#39;], PDO::FETCH_CLASS, MyClass::class); . . exec() . Ajaa preparoidun tietokantakyselyn ja palauttaa sen tuloksena muuntuneiden rivien lukumäärän (rowCount), tai heittää PikeExceptionin. . Signature . public function exec ( string $query, mixed[] $params = null ) : int . Esimerkit . Katso myös: . Tietokanta &gt; Datan insertointi. | Tietokanta &gt; Datan päivittäminen. | Tietokanta &gt; Datan poistaminen. | . $numAffectedRows = $db-&gt;exec(&#39;INSERT INTO `foo` VALUES (?, ?)&#39;, [&#39;1&#39;, &#39;foo&#39;]); $numAffectedRows = $db-&gt;exec(&#39;UPDATE `foo` SET `field1` = ? WHERE `id` = ?&#39;, [&#39;foo&#39;, &#39;1&#39;]); . . beginTransaction() . Aloittaa transaktion, tai ei tee mitään mikäli sellainen oli jo aloitettu. . Signature . public function beginTransaction ( void ) : int . Esimerkit . $db-&gt;beginTransaction(); . . commit() . Hyväksyy uloimman transaktion (transaktio, joka aloitetaan ensimmäisenä) jälkeen suoritetut tietokantaoperaatiot, tai ei tee mitään mikäli transaktio ei ollut ulommainen. . Signature . public function commit ( void ) : int . Esimerkit . $db-&gt;commit(); . . rollBack() . Kumoaa uloimman transaktion (transaktio, joka aloitetaan ensimmäisenä) jälkeen suoritetut tietokantaoperaatiot, tai ei tee mitään mikäli transaktio ei ollut ulommainen. . Signature . public function rollBack ( void ) : int . Esimerkit . $db-&gt;rollBack(); . . runInTransaction() . Ajaa funktion transaktiossa. . Signature . public function runInTransaction ( Closure $fn ) : mixed . Esimerkit . $myValue = $db-&gt;runInTransaction(function () use ($db) { $db-&gt;exec(...); $db-&gt;exec(...); return &#39;my-value&#39;; }); . . lastInsertId() . Ks. PDO-&gt;lastInsertId(). . Signature . public function lastInsertId ( void ) : string . Esimerkit . $id = $db-&gt;lastInsertId(); . . attr() . Palauttaa tai asettaa tietokantayhteys-attribuutin. . Signature . public function attr ( int $attr, mixed $value = null ) : mixed|bool . Esimerkit . Katso myös: . PDO-&gt;getAttribute() | PDO-&gt;setAttribute() | . $db-&gt;attr(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $errMode = $db-&gt;attr(PDO::ATTR_ERRMODE); . . setConfig() . Asettaa tietokantayhteyden avaamisessa käytettävän konfiguraation. . Signature . public function setConfig ( object|array&lt;string, mixed&gt; $config ) : void . Esimerkit . $db-&gt;setConfig([&#39;db.host&#39; =&gt; &#39;127.0.0.1&#39;, &#39;db.user&#39; =&gt; &#39;user&#39;]); . . makeInsertQParts() . Luo komponentit yhden rivin INSERT-kyselyä varten. . Signature . public static function makeInsertQParts ( object|array&lt;string, mixed&gt; $data ) : array . Esimerkit . Katso myös Tietokanta &gt; Datan insertointi. . [$qList, $values, $columns] = $db-&gt;makeInsertQParts([&#39;field&#39; =&gt; &#39;value&#39;]); $db-&gt;exec(&quot;INSERT INTO `foo` ({$columns}) VALUES ({$qList})&quot;, $values); . . makeBatchInsertQParts() . Luo komponentit useamman rivin INSERT-kyselyä varten. . Signature . public static function makeBatchInsertQParts ( array&lt;object|array&gt; $data ) : array . Esimerkit . Katso myös Tietokanta &gt; Datan insertointi. . [$qGroups, $values, $columns] = $db-&gt;makeBatchInsertQParts([ [&#39;field&#39; =&gt; &#39;value1&#39;], [&#39;field&#39; =&gt; &#39;value2&#39;], ]); $db-&gt;exec(&quot;INSERT INTO `foo` ({$columns}) VALUES {$qGroups}&quot;, $values); . . makeUpdateQParts() . Luo komponentit UPDATE-kyselyä varten. . Signature . public static function makeUpdateQParts ( object|array&lt;string, mixed&gt; $data ) : array . Esimerkit . Katso myös Tietokanta &gt; Datan päivittäminen. . [$columns, $values] = $db-&gt;makeUpdateQParts([&#39;field&#39; =&gt; &#39;value&#39;]); $db-&gt;exec(&quot;UPDATE `foo` SET {$columns} WHERE `id` = ?&quot;, array_merge($values, [&#39;1&#39;])); . . columnify() . Palauttaa merkkijonon, jota voi turvallisesti käyttää mm. SQL-taulun sarakkeen nimenä. . Signature . public static function columnify ( string $columnNameCandidate ) : string . Esimerkit . $columnified = $db-&gt;columnify(&#39;DROP table users&#39;); // &#39;`DROPtableusers`&#39; .",
    "url": "https://ut4.github.io/pike/api/pike_db.html",
    "relUrl": "/api/pike_db.html"
  }
  ,"20": {
    "title": "Pike\\FileSystemInterface",
    "content": "interface Pike FileSystemInterface . Rajapinta jonka Pikessä käytettävät tiedostonhallintaluokkien tulee implementoida. . Synopsis . interface FileSystemInterface { /* Metodit */ public write ( string $path, string $content ) : int|false public read ( string $path ) : string|false public unlink ( string $path ) : bool public copy ( string $path, string $destPath ) : bool public mkDir ( string $path, int $perms = 0755, bool $recursive = true ) : bool public rmDir ( string $path, resource $context = null ) : bool public isFile ( string $path ) : bool public isDir ( string $path ) : bool public readDir ( string $path, string $filterPattern = &#39;*&#39;, int $flags = GLOB_ERR); string[]|false public readDirRecursive ( string $path, string $filterRegexp = &#39;/.*/&#39; ) : array public lastModTime ( string $path ) : int|false } .",
    "url": "https://ut4.github.io/pike/api/pike_file-system-interface.html",
    "relUrl": "/api/pike_file-system-interface.html"
  }
  ,"21": {
    "title": "Pike\\FileSystem",
    "content": "class Pike FileSystem . Abstraktoi php:n omat tiedostonhallintafunktiot. . Synopsis . class FileSystem implements FileSystemInterface { /* Metodit */ public write ( string $path, string $content ) : int|false public read ( string $path ) : string|false public unlink ( string $path ) : bool public copy ( string $path, string $destPath ) : bool public mkDir ( string $path, int $perms = 0755, bool $recursive = true ) : bool public rmDir ( string $path, $context = null ) : bool public isFile ( string $path ) : bool public isDir ( string $path ) : bool public readDir ( string $path, string $filterPattern = &#39;*&#39;, int $flags = GLOB_ERR ) : string[]|false public readDirRecursive ( string $path, string $filterRegexp = &#39;/.*/&#39;, int $flags = FilesystemIterator::CURRENT_AS_PATHNAME ) : mixed[] public lastModTime ( string $path ) : int|false public static normalizePath ( string $path ) : string } . Metodit . write() . Kirjoittaa tiedostoon. . Signature . public function write ( string $path, string $content ) : int|false . Esimerkit . Katso myös Tiedostojen hallinta &gt; Tiedostoon kirjoittaminen. . $numBytesWritten = $fs-&gt;write(__DIR__ . &#39;/tiedosto.txt&#39;, &#39;Sisältö&#39;); . . read() . Lukee tiedoston. . Signature . public function read ( string $path ) : string|false . Esimerkit . Katso myös Tiedostojen hallinta &gt; Tiedoston lukeminen. . $contents = $fs-&gt;read(__DIR__ . &#39;/tiedosto.txt&#39;); . . unlink() . Poistaa tiedoston. . Signature . public function unlink ( string $path ) : bool . Esimerkit . Katso myös Tiedostojen hallinta &gt; Tiedoston poistaminen. . $ok = $fs-&gt;unlink(__DIR__ . &#39;/tiedosto.txt&#39;); . . copy() . Kopioi tiedoston. . Signature . public function copy ( string $path, string $destPath ) : bool . Esimerkit . Katso myös Tiedostojen hallinta &gt; Tiedoston kopioiminen. . $ok = $fs-&gt;copy(__DIR__ . &#39;/tiedosto.txt&#39;, __DIR__ . &#39;/copied.txt&#39;); . . mkDir() . Luo kansion tai kansioita. . Signature . public function mkDir ( string $path, int $perms = 0755, bool $recursive = true ) : bool . Esimerkit . Katso myös Tiedostojen hallinta &gt; Kansion luominen. . $ok = $fs-&gt;mkDir(__DIR__ . &#39;/kansio&#39;); . . rmDir() . Poistaa tiedoston. . Signature . public function rmDir ( string $path, $context = null ) : bool . Esimerkit . Katso myös Tiedostojen hallinta &gt; Kansion poistaminen. . $ok = $fs-&gt;rmDir(__DIR__ . &#39;/kansio&#39;); . . isFile() . Kertoo onko tiedosto olemassa. . Signature . public function isFile ( string $path ) : bool . Esimerkit . Katso myös Tiedostojen hallinta &gt; Tiedostopolun tarkistaminen. . $isFile = $fs-&gt;isFile(__DIR__ . &#39;/tiedosto.txt&#39;); . . isDir() . Kertoo onko kansio olemassa. . Signature . public function isDir ( string $path ) : bool . Esimerkit . Katso myös Tiedostojen hallinta &gt; Kansiopolun tarkistaminen. . $isDir = $fs-&gt;isDir(__DIR__ . &#39;/kansio&#39;); . . readDir() . Lukee kansion sisällön ei-rekursiivisesti. . Signature . public function readDir ( string $path, string $filterPattern = &#39;*&#39;, int $flags = GLOB_ERR ) : string[]|false . Esimerkit . Katso myös Tiedostojen hallinta &gt; Kansion sisällön lukeminen (Ei rekursiivinen). . $fullFilePaths = $fs-&gt;readDir(__DIR__ . &#39;/kansio&#39;); . . readDirRecursive() . Lukee kansion sisällön rekursiivisesti. . Signature . public function readDirRecursive ( string $path, string $filterRegexp = &#39;/.*/&#39;, int $flags = FilesystemIterator::CURRENT_AS_PATHNAME ) : mixed[] . Esimerkit . Katso myös Tiedostojen hallinta &gt; Kansion sisällön lukeminen (Rekursiivinen). . $fullFilePaths = $fs-&gt;readDirRecursive(__DIR__ . &#39;/kansio&#39;); . . lastModTime() . Kertoo milloin tiedostoa on edellisen kerran muokattu. . Signature . public function lastModTime ( string $path ) : int|false . Esimerkit . Katso myös Tiedostojen hallinta &gt; Viimeisimmän modifikaation lukeminen (Rekursiivinen). . $unixTime = $fs-&gt;lastModTime(__DIR__ . &#39;/tiedosto.txt&#39;); . . static normalizePath() . Normalisoi tiedostopolun. . Signature . public static function normalizePath ( string $path ) : string . Esimerkit . Katso myös Tiedostojen hallinta &gt; Polun normalisointi. . $normalized = FileSystem::normalizePath($notNormalized); .",
    "url": "https://ut4.github.io/pike/api/pike_file-system.html",
    "relUrl": "/api/pike_file-system.html"
  }
  ,"22": {
    "title": "Pike\\NativeSession",
    "content": "class Pike NativeSession . Abstraktoi php:n oman sessio-implementaation. . Synopsis . class NativeSession implements SessionInterface { /* Metodit */ public __construct ( string $bucketKey = &#39;pike&#39;, bool $autostart = true) public start ( void ) : void public put ( string $key, mixed $value ) : void public get ( string $key, mixed $default = null ) : mixed public remove ( string $key ) : void public commit ( void ) : void public destroy ( void ) : void } . Metodit . __construct() . Luo uuden sessio-olion. . Signature . public function __construct ( string $bucketKey = &#39;pike&#39;, bool $autostart = true) . Esimerkit . $session = new NativeSession(&#39;namespace&#39;, false); . . start() . Avaa session. . Signature . public function start ( void ) : void . Esimerkit . $session-&gt;start(); . . put() . Kirjoittaa arvon sessioon. . Signature . public function put ( string $key, mixed $value ) : void . Esimerkit . $session-&gt;put(&#39;user&#39;, [&#39;id&#39; =&gt; &#39;12&#39;, &#39;role&#39; =&gt; 1]); . . get() . Palauttaa sessioon kirjoitetun arvon, tai $default mikäli sitä ei löytynyt. . Signature . public function get ( string $key, mixed $default = null ) : mixed . Esimerkit . $user = $session-&gt;get(&#39;user&#39;, [&#39;id&#39; =&gt; 0]); . . remove() . Poistaa arvon sessiosta. . Signature . public function remove ( string $key ) : void . Esimerkit . $session-&gt;remove(&#39;user&#39;); . . commit() . Kirjoittaa sessioon kirjoitetut arvot levylle, ja päättää session. . Signature . public function commit ( void ) : void . Esimerkit . $session-&gt;commit(); . . destroy() . Poistaa kaikki tähän sessioon kirjoitetut arvot. . Signature . public function destroy ( void ) : void . Esimerkit . $session-&gt;destroy(); .",
    "url": "https://ut4.github.io/pike/api/pike_native-session.html",
    "relUrl": "/api/pike_native-session.html"
  }
  ,"23": {
    "title": "Pike\\ObjectValidator",
    "content": "class Pike ObjectValidator . Luokka jolla voi validoida olioita. Katso myös Datan validointi &gt; Olioiden validointi. . Synopsis . class ObjectValidator { /* Metodit */ public rule ( string $propPath, string $ruleName, ...$args ) : ObjectValidator public validate ( object $object ) : string[] public addRuleImpl ( string $name, callable $checkFn, string $errorTmpl ) : ObjectValidator } . Metodit . rule() . Lisää uuden validaatiosäännön. . Signature . public function rule ( string $propPath, string $ruleName, ...$args ) : ObjectValidator . Esimerkit . $validator-&gt;rule(&#39;foo&#39;, &#39;is&#39;, &#39;string&#39;)-&gt;rule(&#39;bar&#39;, &#39;minLength&#39;, 10); . . validate() . Validoi arvon $object. Palauttaa virheviestit, tai [] mikäli niitä ei ollut. . Signature . public function validate ( object $object ) : string[] . Esimerkit . $errors = $validator-&gt;validate((object) [&#39;foo&#39; =&gt; &#39;a&#39;, =&gt; &#39;bar&#39; =&gt; &#39;b&#39;]); . . addRuleImpl() . Rekisteröi custom-validaatiosääntöimplementaation. Käytettävissä vain siihen lisätyssä oliossa. . Signature . public function addRuleImpl ( string $name, callable $checkFn, string $errorTmpl ) : ObjectValidator . Esimerkit . Katso myös Datan validointi &gt; Custom one-time -validaattorit. . $v = $v-&gt;addRuleImpl(&#39;isFoo&#39;, function ($value) { return $value === &#39;foo&#39;; }, &#39;%s ei ole foo&#39;); .",
    "url": "https://ut4.github.io/pike/api/pike_object-validator.html",
    "relUrl": "/api/pike_object-validator.html"
  }
  ,"24": {
    "title": "Pike\\PikeException",
    "content": "class Pike PikeException . Piken ainoa poikkeusluokka. . Synopsis . class PikeException extends RuntimeException { /* Vakiot */ const FAILED_DB_OP = 101010 ; const FAILED_FS_OP = 101011 ; const BAD_INPUT = 101012 ; const INEFFECTUAL_DB_OP = 101013 ; const ERROR_EXCEPTION = 101014 ; } . Esimerkit . try { throw new PikeException(PikeException::BAD_INPUT); } catch (PikeException $e) { $e-&gt;getCode() === PikeException::BAD_INPUT; // true } .",
    "url": "https://ut4.github.io/pike/api/pike_pike-exception.html",
    "relUrl": "/api/pike_pike-exception.html"
  }
  ,"25": {
    "title": "Pike\\Request",
    "content": "class Pike Request . Luokka, joka kapseloi HTTP-pyynnöt. . Synopsis . class Request { /* Muuttujat */ public string $path ; public string $method ; public object $body ; public object $files ; public object $params ; public object $routeInfo ; public ?string $name ; /* Metodit */ public __construct ( string $path, string $method = &#39;GET&#39;, object $body = null, object $files = null, array $serverVars = null ) public attr ( string $key, mixed $default = null ) : mixed public cookie ( string $key, ?string $default = null ) : ?string public static createFromGlobals ( string $BASE_URL, string $urlPath = null ) : Request } . Muuttujat . path Pyynnön polku, esim. /yritys/palvelut?foo. method Pyynnön HTTP-metodi, esim. POST. body $_POST-data, tai (json)parsattu php://input. files Pyynnön tiedostot ($_FILES). params Pyynnön parametrit, esim. (object) [&#39;parametrinNimi&#39; =&gt; &#39;arvo&#39;]. routeInfo Lisätietoa pyynnön reittimäärityksestä, esim. (object) [&#39;myCtx&#39; =&gt; [&#39;my&#39; =&gt; &#39;data&#39;], &#39;name&#39; =&gt; &#39;reitin-nimi&#39;]. name Pyynnön reittimäärityksen nimi. Sama kuin routeInfo-&gt;name. Metodit . __construct() . Luo uuden request-olion. . Signature . public function __construct ( string $path, string $method = &#39;GET&#39;, object $body = null, object $files = null, array $serverVars = null ) . Esimerkit . Katso myös Pike Request::createFromGlobals(). . $request = new Request(&#39;/url&#39;); . . attr() . Palauttaa arvon $_SERVER-taukosta, tai $default mikäli sitä ei löytynyt. . Signature . public function attr ( string $key, mixed $default = null ) : mixed . Esimerkit . $ip = $request-&gt;attr(&#39;REMOTE_ADDR&#39;); . . cookie() . Palauttaa arvon $_COOKIE-taukosta, tai $default mikäli sitä ei löytynyt. . Signature . public function cookie ( string $key, ?string $default = null ) : ?string . Esimerkit . $value = $request-&gt;cookie(&#39;myCookie&#39;); . . createFromGlobals() . Luo uuden request-olion asettaen: . pathiksi $_SERVER[&#39;REQUEST_URI&#39;] (poistaen sen alusta $BASE_URL) | metodiksi $_SERVER[&#39;REQUEST_METHOD&#39;] | bodyksi: $_POST mikäli content-type-headeri ei ollut application/json | json_decode(php://input) mikäli content-type-headeri oli application/json | . | . Signature . public static function createFromGlobals ( string $BASE_URL, string $urlPath = null ) : Request . Esimerkit . $request = Request::createFromGlobals(&#39;/&#39;); .",
    "url": "https://ut4.github.io/pike/api/pike_request.html",
    "relUrl": "/api/pike_request.html"
  }
  ,"26": {
    "title": "Pike\\Response",
    "content": "class Pike Response . Luokka jolla rakennetaan HTTP-vastaukset, jotka Pike toimittaa clientille. . Synopsis . class Response { /* Metodit */ public __construct ( int $statusCode = 200 ) public status ( int $statusCode ) : Response public json ( object|array|string $data ) : Response public html ( string $body ) : Response public plain ( string $body ) : Response public attachment ( string $data, string $fileName = &#39;file.zip&#39;, string $mime = &#39;application/zip&#39; ) : Response public redirect ( string $to, bool $isPermanent = true ) : Response public header ( string $name, string $value, bool $replace = true ) : Response public send ( void ) : void public sendIfReady ( void ) : bool public isSent ( void ) : bool } . Metodit . __construct() . Luo uuden response-olion. . Signature . public function __construct ( int $statusCode = 200 ) . Esimerkit . $response = new Response(404); . . status() . Asettaa vastauksen HTTP-statuskoodin. . Signature . public function status ( int $statusCode ) : Response . Esimerkit . $response = $response-&gt;status(418); . . json() . Asettaa vastauksen bodyksi $data, ja statuskoodiksi application/json. . Signature . public function json ( object|array|string $data ) : Response . Esimerkit . $response = $response-&gt;json([&#39;key&#39; =&gt; &#39;val&#39;]); . . html() . Asettaa vastauksen bodyksi $data, ja statuskoodiksi text/html. . Signature . public function html ( string $body ) : Response . Esimerkit . $response = $response-&gt;html(&#39;&lt;!DOCTYPE html&gt;...&#39;); . . plain() . Asettaa vastauksen bodyksi $data, ja statuskoodiksi text/plain. . Signature . public function plain ( string $body ) : Response . Esimerkit . $response = $response-&gt;plain(&#39;Tekstiä...&#39;); . . attachment() . Lisää vastaukseen tiedoston. . Signature . public function attachment ( string $data, string $fileName = &#39;file.zip&#39;, string $mime = &#39;application/zip&#39; ) : Response . Esimerkit . $response = $response-&gt;attachment(&#39;Tekstiä&#39;, &#39;tiedosto.txt&#39;, &#39;text/plain&#39;); . . redirect() . Asettaa vastaukseen uudelleenohjauksen. . Signature . public function redirect ( string $to, bool $isPermanent = true ) : Response . Esimerkit . $response = $response-&gt;redirect(&#39;https://site.com/url&#39;); . . header() . Lisää vastaukseen HTTP-headerin. . Signature . public function header ( string $name, string $value, bool $replace = true ) : Response . Esimerkit . $response = $response-&gt;header(&#39;name&#39;, &#39;value&#39;); . . send() . Lähettää vastauksen clientille, tai heittää Pike PikeExceptionin mikäli vastauksessa ei ollut mitään lähetettävää. . Signature . public function send ( void ) : void . Esimerkit . $response-&gt;send(); . . sendIfReady() . Lähettää vastauksen mikäli se ei ollut vielä lähetetty. . Signature . public function sendIfReady ( void ) : bool . Esimerkit . $wasSent = $response-&gt;sendIfReady(); . . isSent() . Kertoo onko vastaus lähetetty. . Signature . public function isSent ( void ) : bool . Esimerkit . $isIt = $response-&gt;isSent(); .",
    "url": "https://ut4.github.io/pike/api/pike_response.html",
    "relUrl": "/api/pike_response.html"
  }
  ,"27": {
    "title": "Pike\\Router",
    "content": "class Pike Router . Luokka jolla määritellään applikaation HTTP-reitit ja niiden käsittelijät (kontrollerit). AltouRouterin dokumentaatio osoittessa altorouter.com. . Synopsis . class Router extends AltoRouter { /* Metodit */ public on ( string $pattern, callable $fn ) : void } . Metodit . on() . Lisää middleware-funktion. . Signature . public function on ( string $pattern, callable $fn ) : void . Esimerkit . Katso myös Esimerkit &gt; Reittien käyttäjäoikeudet. . $router-&gt;on(&#39;*&#39;, function (Request $req, Response $res, callable $next) { // .. }); .",
    "url": "https://ut4.github.io/pike/api/pike_router.html",
    "relUrl": "/api/pike_router.html"
  }
  ,"28": {
    "title": "Pike\\SessionInterface",
    "content": "interface Pike SessionInterface . Rajapinta jonka Pikessä käytettävät sessioluokat tulee implementoida. . Synopsis . interface SessionInterface { /* Metodit */ public start () : void public put (string $key, mixed $value) : void public get (string $key, mixed $default = null) : mixed public remove (string $key) : void public commit () : void public destroy () : void } .",
    "url": "https://ut4.github.io/pike/api/pike_session-interface.html",
    "relUrl": "/api/pike_session-interface.html"
  }
  ,"29": {
    "title": "Pike\\Template",
    "content": "class Pike Template . Luokka joka auttaa HTML-sisällön turvallisessa ulostamisessa. . Tämä luokka on suunniteltu perittäväksi. . Synopsis . class Template { /* Metodit */ public __construct ( string $file, array&lt;string, mixed&gt; $vars = null ) public render ( array&lt;string, mixed&gt; $locals = [] ) : string } . Metodit . __construct() . Luo uuden templaatti-olion. $vars-taulukon arvoihin voi viitata templaatissa $this-&gt;taulukonKentta. . Signature . public function __construct ( string $file, array&lt;string, mixed&gt; $vars = null ) . Esimerkit . $tmpl = new Template(__DIR__ . &#39;/foo.php&#39;, [&#39;taulukonKentta&#39; =&gt; &#39;bar&#39;]); . . render() . Renderöi konstruktorissa määritellyn tiedoston. $locals-taulukon arvoihin voi viitata templaatissa $taulukonKentta. . Signature . public function render ( array&lt;string, mixed&gt; $locals = [] ) : string . Esimerkit . $output = $tmpl-&gt;render([&#39;taulukonKentta&#39; =&gt; &#39;value&#39;]); .",
    "url": "https://ut4.github.io/pike/api/pike_template.html",
    "relUrl": "/api/pike_template.html"
  }
  ,"30": {
    "title": "Pike\\Translator",
    "content": "class Pike Translator . Tämä luokka on suunniteltu perittäväksi. . Synopsis . class Translator { /* Metodit */ public __construct ( array&lt;string, string&gt; $strings = [] ) public addStrings ( array&lt;string, string&gt; $strings ) : void public t ( string $key, ...$args ) : string public hasKey ( string $key ) : bool } . Metodit . __construct() . Luo uuden kääntäjä-olion. . Signature . public function __construct ( array&lt;string, string&gt; $strings = [] ) . Esimerkit . $translator = new Translator([&#39;Hello World!&#39; =&gt; &#39;Hei Maailma!&#39;]); . . addStrings() . Rekisteröi lisää käännösmerkkijonoja. . Signature . public function addStrings ( array&lt;string, string&gt; $strings ) : void . Esimerkit . $translator-&gt;addStrings([&#39;Hello World!&#39; =&gt; &#39;Hei Maailma!&#39;]); . . t() . Kääntää käännösmerkkijonon $key, ja korvaa siihen määritellyt sprintf-placeholderit (esim. %s) argumenteilla $args. . Signature . public function t ( string $key, ...$args ) : string . Esimerkit . $translated = $translator-&gt;t(&#39;Platform %d %s&#39;, 9, &#39;3/4&#39;); . . hasKey() . Kertoo onko käännösmerkkijono $key rekisteröity. . Signature . public function hasKey ( string $key ) : bool . Esimerkit . $hasIt = $translator-&gt;hasKey(&#39;Hello World!&#39;); .",
    "url": "https://ut4.github.io/pike/api/pike_translator.html",
    "relUrl": "/api/pike_translator.html"
  }
  ,"31": {
    "title": "Pike\\Validation",
    "content": "abstract class Pike Validation . Datan validointia helpottava luokka. . Synopsis . abstract class Validation { /* Metodit */ public static makeValueValidator ( void ) : ValueValidator public static makeObjectValidator ( void ) : ObjectValidator public static is ( mixed $value, string $expectedType ) : bool public static isMoreOrEqualLength ( string|array|Countable $value, int $min, string $expectedType = &#39;string&#39; ) : bool public static isLessOrEqualLength ( string|array|Countable $value, int $max, string $expectedType = &#39;string&#39; ) : bool public static isEqualOrGreaterThan ( mixed $value, int $min ) : bool public static isEqualOrLessThan ( mixed $value, int $max ) : bool public static isOneOf ( mixed $value, array $listOfAllowedVals ) : bool public static isIdentifier ( $str ) : bool public static doesMatchRegexp ( $str, string $pattern ) : bool } . Metodit . makeObjectValidator() . Luo uuden Pike ObjectValidator-olion. . Signature . public static function makeObjectValidator( void ) : ObjectValidator . Esimerkit . Katso myös Datan validointi &gt; Olioiden validointi. . $validator = Validation::makeObjectValidator(); . . makeValueValidator() . Luo uuden Pike ValueValidator-olion. . Signature . public static function makeValueValidator( void ) : ValueValidator . Esimerkit . Katso myös Datan validointi &gt; Yksittäisten arvojen validointi. . $validator = Validation::makeValueValidator(); . . is() . $expectedType tulee olla ‘string’|‘int’|‘number’|‘array’|‘bool’|‘float’|‘object’ | . Signature . public static function is ( mixed $value, string $expectedType ) : bool . Esimerkit . $isString = Validation::is(&#39;value&#39;, &#39;string&#39;); . . isMoreOrEqualLength() . Signature . public static function isMoreOrEqualLength ( string|array|Countable $value, int $min, string $expectedType = &#39;string&#39; ) : bool . Esimerkit . $isMoreOrEqual = Validation::isMoreOrEqualLength(&#39;value&#39;, 3); . . isLessOrEqualLength() . Signature . public static function isLessOrEqualLength ( string|array|Countable $value, int $max, string $expectedType = &#39;string&#39; ) : bool . Esimerkit . $isLessOrEqual = Validation::isLessOrEqualLength(&#39;value&#39;, 32); . . isEqualOrGreaterThan() . Signature . public static function isEqualOrGreaterThan ( mixed $value, int $min ) : bool . Esimerkit . $isEqualOrGreater = Validation::isEqualOrGreaterThan(5.0, 3); . . isEqualOrLessThan() . Signature . public static function isEqualOrLessThan ( mixed $value, int $max ) : bool . Esimerkit . $isEqualOrLess = Validation::isEqualOrLessThan(5, 6); . . isOneOf() . Signature . public static function isOneOf ( mixed $value, array $listOfAllowedVals ) : bool . Esimerkit . $isIt = Validation::isOneOf(5, [1,5,6]); . . isIdentifier() . Signature . public static function isIdentifier ( $str ) : bool . Esimerkit . $isIt = Validation::isIdentifier(&#39;abc_1&#39;); . . doesMatchRegexp() . Signature . public static function doesMatchRegexp ( $str, string $pattern ) : bool . Esimerkit . $doesIt = Validation::doesMatchRegexp(&#39;value&#39;, &#39;/.*/&#39;); .",
    "url": "https://ut4.github.io/pike/api/pike_validation.html",
    "relUrl": "/api/pike_validation.html"
  }
  ,"32": {
    "title": "Pike\\ValueValidator",
    "content": "class Pike ValueValidator . Luokka jolla voi validoida yksittäisiä arvoja. Katso myös Datan validointi &gt; Yksittäisten arvojen validointi. . Synopsis . class ValueValidator { /* Metodit */ public rule ( string $ruleName, ...$args ) : ValueValidator public validate ( mixed $value, string $valueName = &#39;value&#39; ) : string[] public addRuleImpl ( string $name, callable $checkFn, string $errorTmpl ) : ValueValidator } . Metodit . rule() . Lisää uuden validaatiosäännön. . Signature . public function rule ( string $ruleName, ...$args ) : ValueValidator . Esimerkit . $validator-&gt;rule(&#39;is&#39;, &#39;string&#39;)-&gt;rule(&#39;minLength&#39;, 10); . . validate() . Validoi arvon $value. Palauttaa virheviestit, tai [] mikäli niitä ei ollut. . Signature . public function validate ( mixed $value, string $valueName = &#39;value&#39; ) : string[] . Esimerkit . $errors = $validator-&gt;validate(&#39;foo&#39;, &#39;Inputin nimi&#39;); . . addRuleImpl() . Rekisteröi custom-validaatiosääntöimplementaation. Käytettävissä vain siihen lisätyssä oliossa. . Signature . public function addRuleImpl ( string $name, callable $checkFn, string $errorTmpl ) : ValueValidator . Esimerkit . Katso myös Datan validointi &gt; Custom one-time -validaattorit. . $v = $v-&gt;addRuleImpl(&#39;isFoo&#39;, function ($value) { return $value === &#39;foo&#39;; }, &#39;%s ei ole foo&#39;); .",
    "url": "https://ut4.github.io/pike/api/pike_value-validator.html",
    "relUrl": "/api/pike_value-validator.html"
  }
  ,"33": {
    "title": "Testaus",
    "content": "Testaus . Pike TestUtils on kokoelma luokkia jotka auttaa Pike-applikaation testauksessa. . Sisällysluettelo . HTTP-reittien testaus Esimerkki, automaattinen assertio | Esimerkki, manuaalinen assertio | | . HTTP-reittien testaus . Pikessä kontrollerien testaus suoritetaan Pike TestUtils HttpTestUtils-traitin metodilla sendRequest(), joka tarvitsee kolme asiaa: . Konfiguroitu Pike-applikaatio ( Pike App-olio) | Testattava reitti ( Pike Request-olio) | Odotettu vastaus ( PHPUnit Framework MockObject MockObject&lt; Pike Response&gt;-olio) | . Esimerkki, automaattinen assertio . &lt;?php ... use PHPUnit Framework TestCase; use Pike AppContext; use Pike Request; use Pike TestUtils HttpTestUtils; class MyControllerTest extends TestCase { // 1. Sisällytä trait use HttpTestUtils; public function testSomeRouteReturnsFoo(): void { // 2. Luo applikaatio-olio $config = []; $ctx = new AppContext; $app = $this-&gt;makeApp([MyApp::class, &#39;create&#39;], $config, $ctx); // 3. Luo olio testattavalle reitille $body = null; $files = null; $serverVars = null; $req = new Request(&#39;/some-route&#39;, &#39;GET&#39;, $body, $files, $serverVars); // 4. Luo olio odotetulle vastaukselle $expectedBody = (object) [&#39;message&#39; =&gt; &#39;foo&#39;]; /////////////////// todo, string $expectedStatusCode = 200; $expectedContentType = &#39;json&#39;; $res = $this-&gt;createMockResponse($expectedBody, $expectedStatusCode, $expectedContentType); // 5. Suorita testi $this-&gt;sendRequest($req, $res, $app); } } . Esimerkki, manuaalinen assertio . Jos haluat suorittaa manuaalisesti assertioita kontrollerin lähettämään vastaukseen ($res-&gt;send(...)), käytä createBodyCapturingMockResponse() sendRequest()-komboa: . &lt;?php ... class MyControllerTest extends TestCase { // 1. Sisällytä trait ... public function testAnotherRouteReturnsBar(): void { // 2. Luo applikaatio-olio $config = []; $ctx = new AppContext; $app = $this-&gt;makeApp([MyApp::class, &#39;create&#39;], $config, $ctx); // 3. Luo olio testattavalle reitille $req = new Request(&#39;/another-route&#39;, &#39;GET&#39;); // 4. Luo olio tulokselle $state = (object) [&#39;actualResponseBody&#39; =&gt; null]; $res = $this-&gt;createBodyCapturingMockResponse($state); // 5. Suorita pyyntö $this-&gt;sendRequest($req, $res, $app); // 6. Assertoi $this-&gt;assertIsString($state-&gt;actualResponseBody); $expected = json_encode((object) [&#39;message&#39; =&gt; &#39;bar&#39;]); $this-&gt;assertEquals($expected, $state-&gt;actualResponseBody); } } .",
    "url": "https://ut4.github.io/pike/testing.html",
    "relUrl": "/testing.html"
  }
  ,"34": {
    "title": "Datan validointi",
    "content": "Datan validointi . Pike sisältää luokat olioiden, ja yksittäisten arvojen validoimiseen. . Sisällysluettelo . Olioiden validointi | Yksittäisten arvojen validointi | Custom one-time -validaattorit | Oletusvalidaattorit rule(‘type’, ‘string’|’int’|’number’|’array’|’bool’|’float’|’object’ $expectedType) | rule(‘minLength’, int $minLength) | rule(‘maxLength’, int $maxLength) | rule(‘min’, int $min) | rule(‘max’, int $max) | rule(‘in’, array $listOfValues) | rule(‘identifier’) | rule(‘regexp’, string $pattern) | | . Olioiden validointi . $object = (object) [ &#39;foo&#39; =&gt; &#39;value&#39;, &#39;bar&#39; =&gt; (object) [&#39;key&#39; =&gt; &#39;another value&#39;], &#39;baz&#39; =&gt; [ (object) [&#39;key&#39; =&gt; &#39;inside array&#39;], (object) [&#39;key&#39; =&gt; &#39;inside array&#39;], ] ]; $errors = ( Pike Validation::makeObjectValidator()) -&gt;rule(&#39;foo&#39;, &#39;type&#39;, &#39;int&#39;) -&gt;rule(&#39;optional?&#39;, &#39;type&#39;, &#39;int&#39;) -&gt;rule(&#39;bar.key&#39;, &#39;minLength&#39;, 1) -&gt;rule(&#39;baz.*.key&#39;, &#39;in&#39;, [&#39;a&#39;, &#39;b&#39;]) -&gt;validate($object); if (!$errors) ; // Ok, $errors == [] else ; // Fail, $errors == [&#39;Virheviesti&#39;, &#39;Toinen virheviesti&#39; ...] . Yksittäisten arvojen validointi . $value = &#39;value&#39;; $errors = ( Pike Validation::makeValueValidator()) -&gt;rule(&#39;type&#39;, &#39;string&#39;) -&gt;rule(&#39;minLength&#39;, 1) -&gt;validate($value); if (!$errors) ; // Ok, $errors == [] else ; // Fail, $errors == [&#39;Virheviesti&#39;, &#39;Toinen virheviesti&#39; ...] . Custom one-time -validaattorit . Yksittäiselle validaattori-instanssille lisätä omia validaattoreita metodilla addRuleImpl(). . $v = Validation::makeValueValidator(); $v2 = Validation::makeValueValidator(); $v-&gt;addRuleImpl(&#39;myRule&#39;, function ($value, $arg1, $arg2) { return $value === $arg1 || $value === $arg2; }, &#39;%s is not %s nor %d&#39;); $errors = $v-&gt;rule(&#39;myRule&#39;, &#39;foo&#39;, 1) -&gt;validate(&#39;bar&#39;); // value is not foo nor 1 $v2-&gt;rule(&#39;myRule&#39;, ...) // PikeException, No implementation found for `myRule`. . Oletusvalidaattorit . rule(‘type’, ‘string’|’int’|’number’|’array’|’bool’|’float’|’object’ $expectedType) . Tarkastaa onko arvo tyyppiä $expectedType. . $valueValidator-&gt;rule(&#39;type&#39;, &#39;string&#39;)-&gt;validate([]); // Errors $valueValidator-&gt;rule(&#39;type&#39;, &#39;string&#39;)-&gt;validate(&#39;str&#39;); // Ok . rule(‘minLength’, int $minLength) . Tarkastaa onko arvo merkkijono tai countable, jonka mb_strlen() tai count() arvo on suurempi, tai yhtä suuri kuin $minLength. . $valueValidator-&gt;rule(&#39;minLength&#39;, 2)-&gt;validate(&#39;s&#39;); // Errors $valueValidator-&gt;rule(&#39;minLength&#39;, 2)-&gt;validate(&#39;st&#39;); // Ok $valueValidator-&gt;rule(&#39;minLength&#39;, 2)-&gt;validate([1]); // Errors $valueValidator-&gt;rule(&#39;minLength&#39;, 2)-&gt;validate([1,2]); // Ok . rule(‘maxLength’, int $maxLength) . Tarkastaa onko arvo merkkijono tai countable, jonka mb_strlen() tai count() arvo on pienempi, tai yhtä suuri kuin $maxLength. . $valueValidator-&gt;rule(&#39;maxLength&#39;, 2)-&gt;validate(&#39;str&#39;); // Errors $valueValidator-&gt;rule(&#39;maxLength&#39;, 2)-&gt;validate(&#39;st&#39;); // Ok $valueValidator-&gt;rule(&#39;maxLength&#39;, 2)-&gt;validate([1,2,3]); // Errors $valueValidator-&gt;rule(&#39;maxLength&#39;, 2)-&gt;validate([1,2]); // Ok . rule(‘min’, int $min) . Tarkastaa onko arvo numero, jonka arvo on enemmän, tai yhtä suuri kuin $min. . $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate(1); // Errors $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate(&#39;1&#39;); // Errors $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate(&#39;foo&#39;); // Errors $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate([]); // Errors $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate(6); // Ok $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate(&#39;6.0&#39;); // Ok $valueValidator-&gt;rule(&#39;min&#39;, 5)-&gt;validate(5); // Ok . rule(‘max’, int $max) . Tarkastaa onko arvo numero, jonka arvo on vähemmän, tai yhtä suuri kuin $max. . $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate(6); // Errors $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate(&#39;6&#39;); // Errors $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate(&#39;foo&#39;); // Errors $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate([]); // Errors $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate(2); // Ok $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate(&#39;2.0&#39;); // Ok $valueValidator-&gt;rule(&#39;max&#39;, 5)-&gt;validate(5); // Ok . rule(‘in’, array $listOfValues) . Tarkastaa löytyykö arvo taulukosta $listOfValues. . $valueValidator-&gt;rule(&#39;in&#39;, [1, 2])-&gt;validate(6); // Errors $valueValidator-&gt;rule(&#39;in&#39;, [1, 2])-&gt;validate(&#39;foo&#39;); // Errors $valueValidator-&gt;rule(&#39;in&#39;, [1, 2])-&gt;validate(&#39;2&#39;); // Errors (väärä tietotyyppi) $valueValidator-&gt;rule(&#39;in&#39;, [1, 2])-&gt;validate(2); // Ok . rule(‘identifier’) . Tarkastaa onko arvo merkkijono, joka: . Alkaa kirjaimella a-zA-Z tai _ | Sisältää ainoastaan a-zA-Z0-9 tai _ | . $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate([]); // Errors (ei string) $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate(&#39;Ab#&#39;); // Errors (non-ascii) $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate(&#39;Abä&#39;); // Errors (non-ascii) $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate(&#39;4foo&#39;); // Errors (alkaa numerolla) $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate(&#39;Abc&#39;); // Ok $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate(&#39;Ab_c&#39;); // Ok $valueValidator-&gt;rule(&#39;identifier&#39;)-&gt;validate(&#39;Ab5&#39;); // Ok . rule(‘regexp’, string $pattern) . Tarkastaa onko arvo merkkijono, joka läpäisee säännöllisen lausekkeen $pattern. . $valueValidator-&gt;rule(&#39;regexp&#39;, &#39;/[a-c]+/&#39;)-&gt;validate(&#39;d&#39;)); // Errors $valueValidator-&gt;rule(&#39;regexp&#39;, &#39;/[a-c]+/&#39;)-&gt;validate(&#39;&#39;)); // Errors $valueValidator-&gt;rule(&#39;regexp&#39;, &#39;/[a-c]+/&#39;)-&gt;validate([])); // Errors $valueValidator-&gt;rule(&#39;regexp&#39;, &#39;/[a-c]+/&#39;)-&gt;validate(&#39;a&#39;)); // Ok $valueValidator-&gt;rule(&#39;regexp&#39;, &#39;/[a-c]+/&#39;)-&gt;validate(&#39;abc&#39;)); // Ok .",
    "url": "https://ut4.github.io/pike/validation.html",
    "relUrl": "/validation.html"
  }
  
}